
SlowMo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003b8c  08003b8c  00004b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c30  08003c30  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c30  08003c30  00004c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c38  08003c38  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c38  08003c38  00004c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c3c  08003c3c  00004c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003c40  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000005c  08003c9c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003c9c  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d182  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f91  00000000  00000000  0001220e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  000141a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c0  00000000  00000000  00014d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a655  00000000  00000000  000155d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7ec  00000000  00000000  0002fc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5653  00000000  00000000  0003d419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e2a6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003368  00000000  00000000  000e2af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e5e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b74 	.word	0x08003b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003b74 	.word	0x08003b74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HAL_UARTEx_EnableLowPower>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_EnableLowPower(UART_HandleTypeDef *huart) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    // This function ensures that UART remains active in low-power modes
    if (huart->Instance == USART2) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a10      	ldr	r2, [pc, #64]	@ (80005b0 <HAL_UARTEx_EnableLowPower+0x50>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d119      	bne.n	80005a6 <HAL_UARTEx_EnableLowPower+0x46>
        __HAL_RCC_USART2_CLK_ENABLE();  // Ensure USART2 clock is enabled
 8000572:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <HAL_UARTEx_EnableLowPower+0x54>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000576:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <HAL_UARTEx_EnableLowPower+0x54>)
 8000578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800057c:	6593      	str	r3, [r2, #88]	@ 0x58
 800057e:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <HAL_UARTEx_EnableLowPower+0x54>)
 8000580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
        huart->Init.Mode = UART_MODE_TX_RX;  // Ensure both TX and RX are enabled
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	220c      	movs	r2, #12
 800058e:	615a      	str	r2, [r3, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;  // OverSampling
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]

        // Apply the configuration changes
        if (HAL_UART_Init(huart) != HAL_OK) {
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f002 f8ff 	bl	800279a <HAL_UART_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <HAL_UARTEx_EnableLowPower+0x46>
            // Initialization error, handle it here
            Error_Handler();
 80005a2:	f000 f93b 	bl	800081c <Error_Handler>
        }
    }
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40004400 	.word	0x40004400
 80005b4:	40021000 	.word	0x40021000

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	@ 0x30
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t MSG[46] = {'\0'};
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	222a      	movs	r2, #42	@ 0x2a
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fe53 	bl	8003274 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 faa0 	bl	8000b12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f829 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f8e3 	bl	80007a0 <MX_GPIO_Init>
  MX_RTC_Init();
 80005da:	f000 f877 	bl	80006cc <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f8ad 	bl	800073c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SystemClock_Config();  // Reconfigure system clocks after waking up
 80005e2:	f000 f821 	bl	8000628 <SystemClock_Config>
	  HAL_UART_Init(&huart2); // Reinitialize UART
 80005e6:	480d      	ldr	r0, [pc, #52]	@ (800061c <main+0x64>)
 80005e8:	f002 f8d7 	bl	800279a <HAL_UART_Init>

	  sprintf(MSG,"Value in backup register 1 is: %d \r\n",HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7));
 80005ec:	2107      	movs	r1, #7
 80005ee:	480c      	ldr	r0, [pc, #48]	@ (8000620 <main+0x68>)
 80005f0:	f002 f8b6 	bl	8002760 <HAL_RTCEx_BKUPRead>
 80005f4:	4602      	mov	r2, r0
 80005f6:	463b      	mov	r3, r7
 80005f8:	490a      	ldr	r1, [pc, #40]	@ (8000624 <main+0x6c>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fe1a 	bl	8003234 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), HAL_MAX_DELAY);
 8000600:	4639      	mov	r1, r7
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	222e      	movs	r2, #46	@ 0x2e
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <main+0x64>)
 800060a:	f002 f914 	bl	8002836 <HAL_UART_Transmit>

	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800060e:	2101      	movs	r1, #1
 8000610:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000614:	f000 fdb8 	bl	8001188 <HAL_PWR_EnterSTOPMode>
	  SystemClock_Config();  // Reconfigure system clocks after waking up
 8000618:	bf00      	nop
 800061a:	e7e2      	b.n	80005e2 <main+0x2a>
 800061c:	200000a4 	.word	0x200000a4
 8000620:	20000078 	.word	0x20000078
 8000624:	08003b8c 	.word	0x08003b8c

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b096      	sub	sp, #88	@ 0x58
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2244      	movs	r2, #68	@ 0x44
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fe1c 	bl	8003274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800064e:	f000 fdc1 	bl	80011d4 <HAL_PWREx_ControlVoltageScaling>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000658:	f000 f8e0 	bl	800081c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800065c:	230a      	movs	r3, #10
 800065e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000664:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2340      	movs	r3, #64	@ 0x40
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800066a:	2301      	movs	r3, #1
 800066c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000672:	2302      	movs	r3, #2
 8000674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 800067a:	230a      	movs	r3, #10
 800067c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fe4e 	bl	800132c <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000696:	f000 f8c1 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2303      	movs	r3, #3
 80006a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80006aa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80006ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	2104      	movs	r1, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fa9b 	bl	8001bf0 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006c0:	f000 f8ac 	bl	800081c <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3758      	adds	r7, #88	@ 0x58
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_RTC_Init+0x68>)
 80006d2:	4a19      	ldr	r2, [pc, #100]	@ (8000738 <MX_RTC_Init+0x6c>)
 80006d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006d6:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_RTC_Init+0x68>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_RTC_Init+0x68>)
 80006de:	227f      	movs	r2, #127	@ 0x7f
 80006e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_RTC_Init+0x68>)
 80006e4:	22ff      	movs	r2, #255	@ 0xff
 80006e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_RTC_Init+0x68>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_RTC_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_RTC_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_RTC_Init+0x68>)
 80006fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000700:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_RTC_Init+0x68>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000708:	480a      	ldr	r0, [pc, #40]	@ (8000734 <MX_RTC_Init+0x68>)
 800070a:	f001 fe1b 	bl	8002344 <HAL_RTC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 f882 	bl	800081c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20490, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000718:	2300      	movs	r3, #0
 800071a:	2200      	movs	r2, #0
 800071c:	f245 010a 	movw	r1, #20490	@ 0x500a
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_RTC_Init+0x68>)
 8000722:	f001 ff37 	bl	8002594 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 800072c:	f000 f876 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000078 	.word	0x20000078
 8000738:	40002800 	.word	0x40002800

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000742:	4a16      	ldr	r2, [pc, #88]	@ (800079c <MX_USART2_UART_Init+0x60>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000748:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000780:	f002 f80b 	bl	800279a <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f847 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  // Enable USART2 in low-power mode
  HAL_UARTEx_EnableLowPower(&huart2);
 800078e:	4802      	ldr	r0, [pc, #8]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000790:	f7ff fee6 	bl	8000560 <HAL_UARTEx_EnableLowPower>

  /* USER CODE END USART2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000a4 	.word	0x200000a4
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_GPIO_Init+0x74>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a16      	ldr	r2, [pc, #88]	@ (8000814 <MX_GPIO_Init+0x74>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_GPIO_Init+0x74>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_GPIO_Init+0x74>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <MX_GPIO_Init+0x74>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_GPIO_Init+0x74>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	480b      	ldr	r0, [pc, #44]	@ (8000818 <MX_GPIO_Init+0x78>)
 80007ec:	f000 fc8a 	bl	8001104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007f0:	2308      	movs	r3, #8
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0x78>)
 8000808:	f000 fb0a 	bl	8000e20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000
 8000818:	48000400 	.word	0x48000400

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <HAL_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6613      	str	r3, [r2, #96]	@ 0x60
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6593      	str	r3, [r2, #88]	@ 0x58
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b090      	sub	sp, #64	@ 0x40
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2234      	movs	r2, #52	@ 0x34
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fcf7 	bl	8003274 <memset>
  if(hrtc->Instance==RTC)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a13      	ldr	r2, [pc, #76]	@ (80008d8 <HAL_RTC_MspInit+0x68>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d11f      	bne.n	80008d0 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000890:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000894:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800089a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fbc9 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80008ac:	f7ff ffb6 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <HAL_RTC_MspInit+0x6c>)
 80008b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80008b6:	4a09      	ldr	r2, [pc, #36]	@ (80008dc <HAL_RTC_MspInit+0x6c>)
 80008b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 fa74 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80008ca:	2003      	movs	r0, #3
 80008cc:	f000 fa8d 	bl	8000dea <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80008d0:	bf00      	nop
 80008d2:	3740      	adds	r7, #64	@ 0x40
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40002800 	.word	0x40002800
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	@ 0x58
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	2234      	movs	r2, #52	@ 0x34
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fcb7 	bl	8003274 <memset>
  if(huart->Instance==USART2)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1f      	ldr	r2, [pc, #124]	@ (8000988 <HAL_UART_MspInit+0xa8>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d136      	bne.n	800097e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000910:	2302      	movs	r3, #2
 8000912:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000914:	2304      	movs	r3, #4
 8000916:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fb8b 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000928:	f7ff ff78 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <HAL_UART_MspInit+0xac>)
 800092e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000930:	4a16      	ldr	r2, [pc, #88]	@ (800098c <HAL_UART_MspInit+0xac>)
 8000932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000936:	6593      	str	r3, [r2, #88]	@ 0x58
 8000938:	4b14      	ldr	r3, [pc, #80]	@ (800098c <HAL_UART_MspInit+0xac>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <HAL_UART_MspInit+0xac>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <HAL_UART_MspInit+0xac>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000950:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <HAL_UART_MspInit+0xac>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800095c:	230c      	movs	r3, #12
 800095e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096c:	2307      	movs	r3, #7
 800096e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097a:	f000 fa51 	bl	8000e20 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800097e:	bf00      	nop
 8000980:	3758      	adds	r7, #88	@ 0x58
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40004400 	.word	0x40004400
 800098c:	40021000 	.word	0x40021000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <NMI_Handler+0x4>

08000998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <MemManage_Handler+0x4>

080009a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e6:	f000 f8e9 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);  // Toggle the LED
 80009f6:	2108      	movs	r1, #8
 80009f8:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <RTC_WKUP_IRQHandler+0x38>)
 80009fa:	f000 fb9b 	bl	8001134 <HAL_GPIO_TogglePin>

	// Write Back Up Register 1 Data
	HAL_PWR_EnableBkUpAccess();
 80009fe:	f000 fbb3 	bl	8001168 <HAL_PWR_EnableBkUpAccess>
				//if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7)!=0xFEFE){
				//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, 0xFEFE);
				//} else {
				//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);  // Toggle the LED
	//}
		uint32_t value = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7);
 8000a02:	2107      	movs	r1, #7
 8000a04:	4809      	ldr	r0, [pc, #36]	@ (8000a2c <RTC_WKUP_IRQHandler+0x3c>)
 8000a06:	f001 feab 	bl	8002760 <HAL_RTCEx_BKUPRead>
 8000a0a:	6078      	str	r0, [r7, #4]
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, value+1);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	461a      	mov	r2, r3
 8000a12:	2107      	movs	r1, #7
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <RTC_WKUP_IRQHandler+0x3c>)
 8000a16:	f001 fe83 	bl	8002720 <HAL_RTCEx_BKUPWrite>

	/* USER CODE END RTC_WKUP_IRQn 0 */
	HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000a1a:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <RTC_WKUP_IRQHandler+0x3c>)
 8000a1c:	f001 fe56 	bl	80026cc <HAL_RTCEx_WakeUpTimerIRQHandler>

  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	48000400 	.word	0x48000400
 8000a2c:	20000078 	.word	0x20000078

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	@ (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f002 fc10 	bl	8003284 <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <_sbrk+0x64>)
 8000a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20008000 	.word	0x20008000
 8000a90:	00000400 	.word	0x00000400
 8000a94:	2000012c 	.word	0x2000012c
 8000a98:	20000280 	.word	0x20000280

08000a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	@ (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000af8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac4:	f7ff ffea 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	@ (8000afc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	@ (8000b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b04 <LoopForever+0xe>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b0c <LoopForever+0x16>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aee:	f002 fbcf 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000af2:	f7ff fd61 	bl	80005b8 <main>

08000af6 <LoopForever>:

LoopForever:
    b LoopForever
 8000af6:	e7fe      	b.n	8000af6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000af8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b04:	08003c40 	.word	0x08003c40
  ldr r2, =_sbss
 8000b08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b0c:	2000027c 	.word	0x2000027c

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>

08000b12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f93d 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 f80e 	bl	8000b44 <HAL_InitTick>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	e001      	b.n	8000b38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b34:	f7ff fe78 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <HAL_InitTick+0x6c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d023      	beq.n	8000ba0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_InitTick+0x70>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <HAL_InitTick+0x6c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f949 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10f      	bne.n	8000b9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d809      	bhi.n	8000b94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 f913 	bl	8000db2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <HAL_InitTick+0x74>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e007      	b.n	8000ba4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	e004      	b.n	8000ba4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e001      	b.n	8000ba4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000130 	.word	0x20000130

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000130 	.word	0x20000130

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	@ (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	@ (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	@ (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	@ 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ff8e 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff29 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff3e 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff8e 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5d 	bl	8000c9c <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff31 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffa2 	bl	8000d58 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	e14e      	b.n	80010ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2101      	movs	r1, #1
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8140 	beq.w	80010c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d005      	beq.n	8000e60 <HAL_GPIO_Init+0x40>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d130      	bne.n	8000ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e96:	2201      	movs	r2, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 0201 	and.w	r2, r3, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d017      	beq.n	8000efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d123      	bne.n	8000f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	6939      	ldr	r1, [r7, #16]
 8000f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0203 	and.w	r2, r3, #3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 809a 	beq.w	80010c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f94:	4b55      	ldr	r3, [pc, #340]	@ (80010ec <HAL_GPIO_Init+0x2cc>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f98:	4a54      	ldr	r2, [pc, #336]	@ (80010ec <HAL_GPIO_Init+0x2cc>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fa0:	4b52      	ldr	r3, [pc, #328]	@ (80010ec <HAL_GPIO_Init+0x2cc>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fac:	4a50      	ldr	r2, [pc, #320]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fd6:	d013      	beq.n	8001000 <HAL_GPIO_Init+0x1e0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a46      	ldr	r2, [pc, #280]	@ (80010f4 <HAL_GPIO_Init+0x2d4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d00d      	beq.n	8000ffc <HAL_GPIO_Init+0x1dc>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a45      	ldr	r2, [pc, #276]	@ (80010f8 <HAL_GPIO_Init+0x2d8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d007      	beq.n	8000ff8 <HAL_GPIO_Init+0x1d8>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a44      	ldr	r2, [pc, #272]	@ (80010fc <HAL_GPIO_Init+0x2dc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d101      	bne.n	8000ff4 <HAL_GPIO_Init+0x1d4>
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	e004      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8001000:	2300      	movs	r3, #0
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	f002 0203 	and.w	r2, r2, #3
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	4093      	lsls	r3, r2
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001012:	4937      	ldr	r1, [pc, #220]	@ (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001020:	4b37      	ldr	r3, [pc, #220]	@ (8001100 <HAL_GPIO_Init+0x2e0>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001044:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <HAL_GPIO_Init+0x2e0>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800104a:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <HAL_GPIO_Init+0x2e0>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800106e:	4a24      	ldr	r2, [pc, #144]	@ (8001100 <HAL_GPIO_Init+0x2e0>)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <HAL_GPIO_Init+0x2e0>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001098:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <HAL_GPIO_Init+0x2e0>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <HAL_GPIO_Init+0x2e0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001100 <HAL_GPIO_Init+0x2e0>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa22 f303 	lsr.w	r3, r2, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f47f aea9 	bne.w	8000e30 <HAL_GPIO_Init+0x10>
  }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000
 80010f4:	48000400 	.word	0x48000400
 80010f8:	48000800 	.word	0x48000800
 80010fc:	48000c00 	.word	0x48000c00
 8001100:	40010400 	.word	0x40010400

08001104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
 8001110:	4613      	mov	r3, r2
 8001112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001114:	787b      	ldrb	r3, [r7, #1]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001120:	e002      	b.n	8001128 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4013      	ands	r3, r2
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43d9      	mvns	r1, r3
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	400b      	ands	r3, r1
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40007000 	.word	0x40007000

08001188 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800119a:	d104      	bne.n	80011a6 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f898 	bl	80012d4 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f869 	bl	8001280 <HAL_PWREx_EnterSTOP0Mode>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40007000 	.word	0x40007000

080011d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011e2:	d130      	bne.n	8001246 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e4:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011f0:	d038      	beq.n	8001264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f2:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001200:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001202:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2232      	movs	r2, #50	@ 0x32
 8001208:	fb02 f303 	mul.w	r3, r2, r3
 800120c:	4a1b      	ldr	r2, [pc, #108]	@ (800127c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	0c9b      	lsrs	r3, r3, #18
 8001214:	3301      	adds	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001218:	e002      	b.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3b01      	subs	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800122c:	d102      	bne.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x60>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f2      	bne.n	800121a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001240:	d110      	bne.n	8001264 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e00f      	b.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001246:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800124e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001252:	d007      	beq.n	8001264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001254:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800125c:	4a05      	ldr	r2, [pc, #20]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001262:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40007000 	.word	0x40007000
 8001278:	20000000 	.word	0x20000000
 800127c:	431bde83 	.word	0x431bde83

08001280 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a0f      	ldr	r2, [pc, #60]	@ (80012cc <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001290:	f023 0307 	bic.w	r3, r3, #7
 8001294:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80012a8:	bf30      	wfi
 80012aa:	e002      	b.n	80012b2 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80012ac:	bf40      	sev
    __WFE();
 80012ae:	bf20      	wfe
    __WFE();
 80012b0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	4a06      	ldr	r2, [pc, #24]	@ (80012d0 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80012b8:	f023 0304 	bic.w	r3, r3, #4
 80012bc:	6113      	str	r3, [r2, #16]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40007000 	.word	0x40007000
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001324 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001328 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001300:	bf30      	wfi
 8001302:	e002      	b.n	800130a <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001304:	bf40      	sev
    __WFE();
 8001306:	bf20      	wfe
    __WFE();
 8001308:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	4a06      	ldr	r2, [pc, #24]	@ (8001328 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001310:	f023 0304 	bic.w	r3, r3, #4
 8001314:	6113      	str	r3, [r2, #16]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40007000 	.word	0x40007000
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	f000 bc4f 	b.w	8001bde <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001340:	4b97      	ldr	r3, [pc, #604]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800134a:	4b95      	ldr	r3, [pc, #596]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80e6 	beq.w	800152e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <HAL_RCC_OscConfig+0x4c>
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	f040 808d 	bne.w	800148a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b01      	cmp	r3, #1
 8001374:	f040 8089 	bne.w	800148a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001378:	4b89      	ldr	r3, [pc, #548]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_RCC_OscConfig+0x66>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	f000 bc26 	b.w	8001bde <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001396:	4b82      	ldr	r3, [pc, #520]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <HAL_RCC_OscConfig+0x80>
 80013a2:	4b7f      	ldr	r3, [pc, #508]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013aa:	e005      	b.n	80013b8 <HAL_RCC_OscConfig+0x8c>
 80013ac:	4b7c      	ldr	r3, [pc, #496]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80013ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d224      	bcs.n	8001406 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fdd9 	bl	8001f78 <RCC_SetFlashLatencyFromMSIRange>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	f000 bc06 	b.w	8001bde <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d2:	4b73      	ldr	r3, [pc, #460]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a72      	ldr	r2, [pc, #456]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b70      	ldr	r3, [pc, #448]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ea:	496d      	ldr	r1, [pc, #436]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	4968      	ldr	r1, [pc, #416]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
 8001404:	e025      	b.n	8001452 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001406:	4b66      	ldr	r3, [pc, #408]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a65      	ldr	r2, [pc, #404]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b63      	ldr	r3, [pc, #396]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141e:	4960      	ldr	r1, [pc, #384]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001424:	4b5e      	ldr	r3, [pc, #376]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	495b      	ldr	r1, [pc, #364]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fd98 	bl	8001f78 <RCC_SetFlashLatencyFromMSIRange>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e3c5      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001452:	f000 fccd 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001456:	4602      	mov	r2, r0
 8001458:	4b51      	ldr	r3, [pc, #324]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	4950      	ldr	r1, [pc, #320]	@ (80015a4 <HAL_RCC_OscConfig+0x278>)
 8001464:	5ccb      	ldrb	r3, [r1, r3]
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	fa22 f303 	lsr.w	r3, r2, r3
 800146e:	4a4e      	ldr	r2, [pc, #312]	@ (80015a8 <HAL_RCC_OscConfig+0x27c>)
 8001470:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001472:	4b4e      	ldr	r3, [pc, #312]	@ (80015ac <HAL_RCC_OscConfig+0x280>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb64 	bl	8000b44 <HAL_InitTick>
 800147c:	4603      	mov	r3, r0
 800147e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d052      	beq.n	800152c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	e3a9      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d032      	beq.n	80014f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001492:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a42      	ldr	r2, [pc, #264]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800149e:	f7ff fba1 	bl	8000be4 <HAL_GetTick>
 80014a2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a6:	f7ff fb9d 	bl	8000be4 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e392      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b8:	4b39      	ldr	r3, [pc, #228]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c4:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a35      	ldr	r2, [pc, #212]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	4930      	ldr	r1, [pc, #192]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e2:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	492b      	ldr	r1, [pc, #172]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
 80014f6:	e01a      	b.n	800152e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014f8:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a28      	ldr	r2, [pc, #160]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001504:	f7ff fb6e 	bl	8000be4 <HAL_GetTick>
 8001508:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150c:	f7ff fb6a 	bl	8000be4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e35f      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x1e0>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d073      	beq.n	8001622 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	2b08      	cmp	r3, #8
 800153e:	d005      	beq.n	800154c <HAL_RCC_OscConfig+0x220>
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d10e      	bne.n	8001564 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d10b      	bne.n	8001564 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d063      	beq.n	8001620 <HAL_RCC_OscConfig+0x2f4>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d15f      	bne.n	8001620 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e33c      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x250>
 800156e:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a0b      	ldr	r2, [pc, #44]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e025      	b.n	80015c8 <HAL_RCC_OscConfig+0x29c>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001584:	d114      	bne.n	80015b0 <HAL_RCC_OscConfig+0x284>
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a02      	ldr	r2, [pc, #8]	@ (80015a0 <HAL_RCC_OscConfig+0x274>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e013      	b.n	80015c8 <HAL_RCC_OscConfig+0x29c>
 80015a0:	40021000 	.word	0x40021000
 80015a4:	08003bb4 	.word	0x08003bb4
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004
 80015b0:	4b8f      	ldr	r3, [pc, #572]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a8e      	ldr	r2, [pc, #568]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b8c      	ldr	r3, [pc, #560]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a8b      	ldr	r2, [pc, #556]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb08 	bl	8000be4 <HAL_GetTick>
 80015d4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fb04 	bl	8000be4 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	@ 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e2f9      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	4b81      	ldr	r3, [pc, #516]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2ac>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff faf4 	bl	8000be4 <HAL_GetTick>
 80015fc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff faf0 	bl	8000be4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	@ 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e2e5      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001612:	4b77      	ldr	r3, [pc, #476]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x2d4>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d060      	beq.n	80016f0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d005      	beq.n	8001640 <HAL_RCC_OscConfig+0x314>
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d119      	bne.n	800166e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d116      	bne.n	800166e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001640:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x32c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e2c2      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	061b      	lsls	r3, r3, #24
 8001666:	4962      	ldr	r1, [pc, #392]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800166c:	e040      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d023      	beq.n	80016be <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001676:	4b5e      	ldr	r3, [pc, #376]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a5d      	ldr	r2, [pc, #372]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff faaf 	bl	8000be4 <HAL_GetTick>
 8001686:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff faab 	bl	8000be4 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e2a0      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169c:	4b54      	ldr	r3, [pc, #336]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b51      	ldr	r3, [pc, #324]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	494e      	ldr	r1, [pc, #312]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
 80016bc:	e018      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	4b4c      	ldr	r3, [pc, #304]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a4b      	ldr	r2, [pc, #300]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff fa8b 	bl	8000be4 <HAL_GetTick>
 80016ce:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fa87 	bl	8000be4 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e27c      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e4:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8082 	beq.w	8001802 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d05f      	beq.n	80017c6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001706:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800170c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	429a      	cmp	r2, r3
 800171a:	d037      	beq.n	800178c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d006      	beq.n	8001734 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e254      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d01b      	beq.n	8001776 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800173e:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001744:	4a2a      	ldr	r2, [pc, #168]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800174e:	f7ff fa49 	bl	8000be4 <HAL_GetTick>
 8001752:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fa45 	bl	8000be4 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b11      	cmp	r3, #17
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e23a      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001768:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ef      	bne.n	8001756 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001776:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800177c:	f023 0210 	bic.w	r2, r3, #16
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	491a      	ldr	r1, [pc, #104]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	4313      	orrs	r3, r2
 8001788:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178c:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001792:	4a17      	ldr	r2, [pc, #92]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fa22 	bl	8000be4 <HAL_GetTick>
 80017a0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fa1e 	bl	8000be4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b11      	cmp	r3, #17
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e213      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ef      	beq.n	80017a4 <HAL_RCC_OscConfig+0x478>
 80017c4:	e01d      	b.n	8001802 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017cc:	4a08      	ldr	r2, [pc, #32]	@ (80017f0 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff fa05 	bl	8000be4 <HAL_GetTick>
 80017da:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fa01 	bl	8000be4 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b11      	cmp	r3, #17
 80017ea:	d903      	bls.n	80017f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1f6      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
 80017f0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f4:	4ba9      	ldr	r3, [pc, #676]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1ed      	bne.n	80017de <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80bd 	beq.w	800198a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001816:	4ba1      	ldr	r3, [pc, #644]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10e      	bne.n	8001840 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b9e      	ldr	r3, [pc, #632]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001826:	4a9d      	ldr	r2, [pc, #628]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800182c:	6593      	str	r3, [r2, #88]	@ 0x58
 800182e:	4b9b      	ldr	r3, [pc, #620]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001840:	4b97      	ldr	r3, [pc, #604]	@ (8001aa0 <HAL_RCC_OscConfig+0x774>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d118      	bne.n	800187e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800184c:	4b94      	ldr	r3, [pc, #592]	@ (8001aa0 <HAL_RCC_OscConfig+0x774>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a93      	ldr	r2, [pc, #588]	@ (8001aa0 <HAL_RCC_OscConfig+0x774>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001856:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001858:	f7ff f9c4 	bl	8000be4 <HAL_GetTick>
 800185c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001860:	f7ff f9c0 	bl	8000be4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e1b5      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001872:	4b8b      	ldr	r3, [pc, #556]	@ (8001aa0 <HAL_RCC_OscConfig+0x774>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d02c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800188a:	4b84      	ldr	r3, [pc, #528]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001890:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189c:	497f      	ldr	r1, [pc, #508]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d010      	beq.n	80018d2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018b0:	4b7a      	ldr	r3, [pc, #488]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b6:	4a79      	ldr	r2, [pc, #484]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018c0:	4b76      	ldr	r3, [pc, #472]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c6:	4a75      	ldr	r2, [pc, #468]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018d0:	e018      	b.n	8001904 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018d2:	4b72      	ldr	r3, [pc, #456]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80018d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d8:	4a70      	ldr	r2, [pc, #448]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018e2:	e00f      	b.n	8001904 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018e4:	4b6d      	ldr	r3, [pc, #436]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ea:	4a6c      	ldr	r2, [pc, #432]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018f4:	4b69      	ldr	r3, [pc, #420]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fa:	4a68      	ldr	r2, [pc, #416]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d016      	beq.n	800193a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff f96a 	bl	8000be4 <HAL_GetTick>
 8001910:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001912:	e00a      	b.n	800192a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff f966 	bl	8000be4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e159      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192a:	4b5c      	ldr	r3, [pc, #368]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 800192c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ed      	beq.n	8001914 <HAL_RCC_OscConfig+0x5e8>
 8001938:	e01d      	b.n	8001976 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193a:	f7ff f953 	bl	8000be4 <HAL_GetTick>
 800193e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff f94f 	bl	8000be4 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e142      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001958:	4b50      	ldr	r3, [pc, #320]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ed      	bne.n	8001942 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001966:	4b4d      	ldr	r3, [pc, #308]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800196c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 800196e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001972:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800197a:	2b01      	cmp	r3, #1
 800197c:	d105      	bne.n	800198a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197e:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	4a46      	ldr	r2, [pc, #280]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001984:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001988:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	2b00      	cmp	r3, #0
 8001994:	d03c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01c      	beq.n	80019d8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800199e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80019a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019a4:	4a3d      	ldr	r2, [pc, #244]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff f919 	bl	8000be4 <HAL_GetTick>
 80019b2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b6:	f7ff f915 	bl	8000be4 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e10a      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019c8:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80019ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ef      	beq.n	80019b6 <HAL_RCC_OscConfig+0x68a>
 80019d6:	e01b      	b.n	8001a10 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019d8:	4b30      	ldr	r3, [pc, #192]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80019da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019de:	4a2f      	ldr	r2, [pc, #188]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff f8fc 	bl	8000be4 <HAL_GetTick>
 80019ec:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019f0:	f7ff f8f8 	bl	8000be4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e0ed      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a02:	4b26      	ldr	r3, [pc, #152]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ef      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80e1 	beq.w	8001bdc <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	f040 80b5 	bne.w	8001b8e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f003 0203 	and.w	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d124      	bne.n	8001a82 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a42:	3b01      	subs	r3, #1
 8001a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d11b      	bne.n	8001a82 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d113      	bne.n	8001a82 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a64:	085b      	lsrs	r3, r3, #1
 8001a66:	3b01      	subs	r3, #1
 8001a68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	085b      	lsrs	r3, r3, #1
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d05f      	beq.n	8001b42 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d05a      	beq.n	8001b3e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a03      	ldr	r2, [pc, #12]	@ (8001a9c <HAL_RCC_OscConfig+0x770>)
 8001a8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a94:	f7ff f8a6 	bl	8000be4 <HAL_GetTick>
 8001a98:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9a:	e00c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x78a>
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f89e 	bl	8000be4 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e093      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac2:	4b49      	ldr	r3, [pc, #292]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	4b49      	ldr	r3, [pc, #292]	@ (8001bec <HAL_RCC_OscConfig+0x8c0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ad2:	3a01      	subs	r2, #1
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001adc:	0212      	lsls	r2, r2, #8
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ae4:	0852      	lsrs	r2, r2, #1
 8001ae6:	3a01      	subs	r2, #1
 8001ae8:	0552      	lsls	r2, r2, #21
 8001aea:	4311      	orrs	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001af0:	0852      	lsrs	r2, r2, #1
 8001af2:	3a01      	subs	r2, #1
 8001af4:	0652      	lsls	r2, r2, #25
 8001af6:	430a      	orrs	r2, r1
 8001af8:	493b      	ldr	r1, [pc, #236]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001afe:	4b3a      	ldr	r3, [pc, #232]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a39      	ldr	r2, [pc, #228]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b08:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b0a:	4b37      	ldr	r3, [pc, #220]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4a36      	ldr	r2, [pc, #216]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b14:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b16:	f7ff f865 	bl	8000be4 <HAL_GetTick>
 8001b1a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff f861 	bl	8000be4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e056      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b30:	4b2d      	ldr	r3, [pc, #180]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b3c:	e04e      	b.n	8001bdc <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e04d      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	4b29      	ldr	r3, [pc, #164]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d146      	bne.n	8001bdc <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b4e:	4b26      	ldr	r3, [pc, #152]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a25      	ldr	r2, [pc, #148]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b58:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b5a:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	4a22      	ldr	r2, [pc, #136]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b64:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b66:	f7ff f83d 	bl	8000be4 <HAL_GetTick>
 8001b6a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff f839 	bl	8000be4 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e02e      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x842>
 8001b8c:	e026      	b.n	8001bdc <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	d021      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a13      	ldr	r2, [pc, #76]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f820 	bl	8000be4 <HAL_GetTick>
 8001ba4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f81c 	bl	8000be4 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e011      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bba:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001bc6:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <HAL_RCC_OscConfig+0x8bc>)
 8001bcc:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8001bd0:	f023 0303 	bic.w	r3, r3, #3
 8001bd4:	60d3      	str	r3, [r2, #12]
 8001bd6:	e001      	b.n	8001bdc <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3728      	adds	r7, #40	@ 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	f99f808c 	.word	0xf99f808c

08001bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0e7      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b75      	ldr	r3, [pc, #468]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d910      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b72      	ldr	r3, [pc, #456]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	4970      	ldr	r1, [pc, #448]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b6e      	ldr	r3, [pc, #440]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0cf      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d010      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d908      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b63      	ldr	r3, [pc, #396]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4960      	ldr	r1, [pc, #384]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d04c      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	4b5a      	ldr	r3, [pc, #360]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d121      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0a6      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8e:	4b54      	ldr	r3, [pc, #336]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d115      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e09a      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e08e      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e086      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc6:	4b46      	ldr	r3, [pc, #280]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f023 0203 	bic.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4943      	ldr	r1, [pc, #268]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd8:	f7fe ff84 	bl	8000be4 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce0:	f7fe ff80 	bl	8000be4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e06e      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 020c 	and.w	r2, r3, #12
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1eb      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d010      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d208      	bcs.n	8001d36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	492b      	ldr	r1, [pc, #172]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d36:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d210      	bcs.n	8001d66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d44:	4b25      	ldr	r3, [pc, #148]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 0207 	bic.w	r2, r3, #7
 8001d4c:	4923      	ldr	r1, [pc, #140]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d54:	4b21      	ldr	r3, [pc, #132]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e036      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d72:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	4918      	ldr	r1, [pc, #96]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4910      	ldr	r1, [pc, #64]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da4:	f000 f824 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	490b      	ldr	r1, [pc, #44]	@ (8001de4 <HAL_RCC_ClockConfig+0x1f4>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	4a09      	ldr	r2, [pc, #36]	@ (8001de8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <HAL_RCC_ClockConfig+0x1fc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe febb 	bl	8000b44 <HAL_InitTick>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08003bb4 	.word	0x08003bb4
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e08:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x34>
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d121      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d11e      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e24:	4b34      	ldr	r3, [pc, #208]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e30:	4b31      	ldr	r3, [pc, #196]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e005      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10d      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d102      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e68:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	e004      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e74:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d134      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d003      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0xac>
 8001e94:	e005      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e98:	617b      	str	r3, [r7, #20]
      break;
 8001e9a:	e005      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9e:	617b      	str	r3, [r7, #20]
      break;
 8001ea0:	e002      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	617b      	str	r3, [r7, #20]
      break;
 8001ea6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	fb03 f202 	mul.w	r2, r3, r2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	0e5b      	lsrs	r3, r3, #25
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08003bcc 	.word	0x08003bcc
 8001f00:	00f42400 	.word	0x00f42400
 8001f04:	007a1200 	.word	0x007a1200

08001f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000000 	.word	0x20000000

08001f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f24:	f7ff fff0 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4904      	ldr	r1, [pc, #16]	@ (8001f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08003bc4 	.word	0x08003bc4

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f50:	f7ff ffda 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0adb      	lsrs	r3, r3, #11
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4904      	ldr	r1, [pc, #16]	@ (8001f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	08003bc4 	.word	0x08003bc4

08001f78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f84:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f90:	f7ff f912 	bl	80011b8 <HAL_PWREx_GetVoltageRange>
 8001f94:	6178      	str	r0, [r7, #20]
 8001f96:	e014      	b.n	8001fc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	4b25      	ldr	r3, [pc, #148]	@ (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	4a24      	ldr	r2, [pc, #144]	@ (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa4:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fb0:	f7ff f902 	bl	80011b8 <HAL_PWREx_GetVoltageRange>
 8001fb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fc8:	d10b      	bne.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b80      	cmp	r3, #128	@ 0x80
 8001fce:	d919      	bls.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fd4:	d902      	bls.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	e013      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	e010      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b80      	cmp	r3, #128	@ 0x80
 8001fe6:	d902      	bls.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fe8:	2303      	movs	r3, #3
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	e00a      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b80      	cmp	r3, #128	@ 0x80
 8001ff2:	d102      	bne.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	e004      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b70      	cmp	r3, #112	@ 0x70
 8001ffe:	d101      	bne.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002000:	2301      	movs	r3, #1
 8002002:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 0207 	bic.w	r2, r3, #7
 800200c:	4909      	ldr	r1, [pc, #36]	@ (8002034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002014:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	40022000 	.word	0x40022000

08002038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002040:	2300      	movs	r3, #0
 8002042:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002044:	2300      	movs	r3, #0
 8002046:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 809e 	beq.w	8002192 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800205a:	4b46      	ldr	r3, [pc, #280]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800206a:	2300      	movs	r3, #0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b40      	ldr	r3, [pc, #256]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002074:	4a3f      	ldr	r2, [pc, #252]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207a:	6593      	str	r3, [r2, #88]	@ 0x58
 800207c:	4b3d      	ldr	r3, [pc, #244]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800208c:	4b3a      	ldr	r3, [pc, #232]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a39      	ldr	r2, [pc, #228]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002096:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002098:	f7fe fda4 	bl	8000be4 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800209e:	e009      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a0:	f7fe fda0 	bl	8000be4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d902      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	74fb      	strb	r3, [r7, #19]
        break;
 80020b2:	e005      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020b4:	4b30      	ldr	r3, [pc, #192]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ef      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d15a      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01e      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d019      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e2:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020ee:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002104:	4a1b      	ldr	r2, [pc, #108]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800210a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800210e:	4a19      	ldr	r2, [pc, #100]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d016      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe fd60 	bl	8000be4 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002126:	e00b      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe fd5c 	bl	8000be4 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d902      	bls.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	74fb      	strb	r3, [r7, #19]
            break;
 800213e:	e006      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0ec      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800214e:	7cfb      	ldrb	r3, [r7, #19]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10b      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002154:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4904      	ldr	r1, [pc, #16]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800216a:	e009      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	74bb      	strb	r3, [r7, #18]
 8002170:	e006      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002180:	7c7b      	ldrb	r3, [r7, #17]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d105      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b6e      	ldr	r3, [pc, #440]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	4a6d      	ldr	r2, [pc, #436]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002190:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800219e:	4b68      	ldr	r3, [pc, #416]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a4:	f023 0203 	bic.w	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4964      	ldr	r1, [pc, #400]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	f023 020c 	bic.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	495c      	ldr	r1, [pc, #368]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021e2:	4b57      	ldr	r3, [pc, #348]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4953      	ldr	r1, [pc, #332]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002204:	4b4e      	ldr	r3, [pc, #312]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	494b      	ldr	r1, [pc, #300]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002226:	4b46      	ldr	r3, [pc, #280]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4942      	ldr	r1, [pc, #264]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002248:	4b3d      	ldr	r3, [pc, #244]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	493a      	ldr	r1, [pc, #232]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226a:	4b35      	ldr	r3, [pc, #212]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002270:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	4931      	ldr	r1, [pc, #196]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800228c:	4b2c      	ldr	r3, [pc, #176]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4929      	ldr	r1, [pc, #164]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ae:	4b24      	ldr	r3, [pc, #144]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	4920      	ldr	r1, [pc, #128]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	4918      	ldr	r1, [pc, #96]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ee:	d105      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f0:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a12      	ldr	r2, [pc, #72]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002308:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	490a      	ldr	r1, [pc, #40]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002326:	d105      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800232e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002332:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002334:	7cbb      	ldrb	r3, [r7, #18]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000

08002344 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d07f      	beq.n	8002456 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fa80 	bl	8000870 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8002376:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002380:	4b37      	ldr	r3, [pc, #220]	@ (8002460 <HAL_RTC_Init+0x11c>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b10      	cmp	r3, #16
 800238a:	d05b      	beq.n	8002444 <HAL_RTC_Init+0x100>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	22ca      	movs	r2, #202	@ 0xca
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2253      	movs	r2, #83	@ 0x53
 800239a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f885 	bl	80024ac <RTC_EnterInitMode>
 80023a2:	4603      	mov	r3, r0
 80023a4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d127      	bne.n	80023fc <HAL_RTC_Init+0xb8>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80023ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023be:	6193      	str	r3, [r2, #24]
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6999      	ldr	r1, [r3, #24]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6912      	ldr	r2, [r2, #16]
 80023e6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	041a      	lsls	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f88b 	bl	8002518 <RTC_ExitInitMode>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d116      	bne.n	800243a <HAL_RTC_Init+0xf6>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 800241a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6999      	ldr	r1, [r3, #24]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	22ff      	movs	r2, #255	@ 0xff
 8002440:	625a      	str	r2, [r3, #36]	@ 0x24
 8002442:	e001      	b.n	8002448 <HAL_RTC_Init+0x104>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <HAL_RTC_Init+0x112>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    }
  }

  return status;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40002800 	.word	0x40002800

08002464 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <HAL_RTC_WaitForSynchro+0x44>)
 8002472:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 8002474:	f7fe fbb6 	bl	8000be4 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800247a:	e009      	b.n	8002490 <HAL_RTC_WaitForSynchro+0x2c>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800247c:	f7fe fbb2 	bl	8000be4 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800248a:	d901      	bls.n	8002490 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e007      	b.n	80024a0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0ee      	beq.n	800247c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	0001005c 	.word	0x0001005c

080024ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d123      	bne.n	800250e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024d4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80024d6:	f7fe fb85 	bl	8000be4 <HAL_GetTick>
 80024da:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024dc:	e00d      	b.n	80024fa <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80024de:	f7fe fb81 	bl	8000be4 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024ec:	d905      	bls.n	80024fa <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2203      	movs	r2, #3
 80024f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <RTC_EnterInitMode+0x62>
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d1e7      	bne.n	80024de <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002524:	4b1a      	ldr	r3, [pc, #104]	@ (8002590 <RTC_ExitInitMode+0x78>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a19      	ldr	r2, [pc, #100]	@ (8002590 <RTC_ExitInitMode+0x78>)
 800252a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800252e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002530:	4b17      	ldr	r3, [pc, #92]	@ (8002590 <RTC_ExitInitMode+0x78>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10c      	bne.n	8002556 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff91 	bl	8002464 <HAL_RTC_WaitForSynchro>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01e      	beq.n	8002586 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2203      	movs	r2, #3
 800254c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      status = HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e017      	b.n	8002586 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002556:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <RTC_ExitInitMode+0x78>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <RTC_ExitInitMode+0x78>)
 800255c:	f023 0320 	bic.w	r3, r3, #32
 8002560:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ff7e 	bl	8002464 <HAL_RTC_WaitForSynchro>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2203      	movs	r2, #3
 8002572:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      status = HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800257a:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <RTC_ExitInitMode+0x78>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <RTC_ExitInitMode+0x78>)
 8002580:	f043 0320 	orr.w	r3, r3, #32
 8002584:	6193      	str	r3, [r2, #24]
  }

  return status;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40002800 	.word	0x40002800

08002594 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e087      	b.n	80026c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	22ca      	movs	r2, #202	@ 0xca
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2253      	movs	r2, #83	@ 0x53
 80025ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025de:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2204      	movs	r2, #4
 80025e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d120      	bne.n	8002638 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
#endif
  {
    tickstart = HAL_GetTick();
 80025f6:	f7fe faf5 	bl	8000be4 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80025fc:	e015      	b.n	800262a <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025fe:	f7fe faf1 	bl	8000be4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800260c:	d90d      	bls.n	800262a <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	22ff      	movs	r2, #255	@ 0xff
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2203      	movs	r2, #3
 800261a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e04a      	b.n	80026c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0e2      	beq.n	80025fe <HAL_RTCEx_SetWakeUpTimer_IT+0x6a>
    }
  }

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	0419      	lsls	r1, r3, #16
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	430a      	orrs	r2, r1
 8002644:	615a      	str	r2, [r3, #20]
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f023 0107 	bic.w	r1, r3, #7
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	430a      	orrs	r2, r1
 8002658:	619a      	str	r2, [r3, #24]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0u)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <HAL_RTCEx_SetWakeUpTimer_IT+0xda>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a18      	ldr	r2, [pc, #96]	@ (80026c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8002666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800266a:	6053      	str	r3, [r2, #4]
 800266c:	e005      	b.n	800267a <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800266e:	4b16      	ldr	r3, [pc, #88]	@ (80026c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a15      	ldr	r2, [pc, #84]	@ (80026c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8002674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002678:	6013      	str	r3, [r2, #0]
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800267a:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	4a12      	ldr	r2, [pc, #72]	@ (80026c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8002680:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002684:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002694:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026a4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	22ff      	movs	r2, #255	@ 0xff
 80026ac:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40010400 	.word	0x40010400

080026cc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 80026d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80026da:	615a      	str	r2, [r3, #20]


#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->MISR & RTC_MISR_WUTMF) != 0u)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d006      	beq.n	80026f8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2204      	movs	r2, #4
 80026f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f80a 	bl	800270c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40010400 	.word	0x40010400

0800270c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t __IO tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4413      	add	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002740:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	009a      	lsls	r2, r3, #2
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4413      	add	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800277e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	4413      	add	r3, r2
 8002788:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	681b      	ldr	r3, [r3, #0]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e040      	b.n	800282e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fe f88f 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2224      	movs	r2, #36	@ 0x24
 80027c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fb0b 	bl	8002dfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8ae 	bl	8002948 <UART_SetConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e01b      	b.n	800282e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002804:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002814:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fb8a 	bl	8002f40 <UART_CheckIdleState>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b08a      	sub	sp, #40	@ 0x28
 800283a:	af02      	add	r7, sp, #8
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800284a:	2b20      	cmp	r3, #32
 800284c:	d177      	bne.n	800293e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_UART_Transmit+0x24>
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e070      	b.n	8002940 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2221      	movs	r2, #33	@ 0x21
 800286a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286c:	f7fe f9ba 	bl	8000be4 <HAL_GetTick>
 8002870:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800288a:	d108      	bne.n	800289e <HAL_UART_Transmit+0x68>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d104      	bne.n	800289e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e003      	b.n	80028a6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028a6:	e02f      	b.n	8002908 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2200      	movs	r2, #0
 80028b0:	2180      	movs	r1, #128	@ 0x80
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fbec 	bl	8003090 <UART_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e03b      	b.n	8002940 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028da:	b292      	uxth	r2, r2
 80028dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	3302      	adds	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e007      	b.n	80028f6 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1c9      	bne.n	80028a8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2200      	movs	r2, #0
 800291c:	2140      	movs	r1, #64	@ 0x40
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fbb6 	bl	8003090 <UART_WaitOnFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e005      	b.n	8002940 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800294c:	b08a      	sub	sp, #40	@ 0x28
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	431a      	orrs	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	431a      	orrs	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4313      	orrs	r3, r2
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b9e      	ldr	r3, [pc, #632]	@ (8002bf0 <UART_SetConfig+0x2a8>)
 8002978:	4013      	ands	r3, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002980:	430b      	orrs	r3, r1
 8002982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a93      	ldr	r2, [pc, #588]	@ (8002bf4 <UART_SetConfig+0x2ac>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b0:	4313      	orrs	r3, r2
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c4:	430a      	orrs	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a8a      	ldr	r2, [pc, #552]	@ (8002bf8 <UART_SetConfig+0x2b0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d126      	bne.n	8002a20 <UART_SetConfig+0xd8>
 80029d2:	4b8a      	ldr	r3, [pc, #552]	@ (8002bfc <UART_SetConfig+0x2b4>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d81b      	bhi.n	8002a18 <UART_SetConfig+0xd0>
 80029e0:	a201      	add	r2, pc, #4	@ (adr r2, 80029e8 <UART_SetConfig+0xa0>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a09 	.word	0x08002a09
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a11 	.word	0x08002a11
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fe:	e0ab      	b.n	8002b58 <UART_SetConfig+0x210>
 8002a00:	2302      	movs	r3, #2
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a06:	e0a7      	b.n	8002b58 <UART_SetConfig+0x210>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a0e:	e0a3      	b.n	8002b58 <UART_SetConfig+0x210>
 8002a10:	2308      	movs	r3, #8
 8002a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a16:	e09f      	b.n	8002b58 <UART_SetConfig+0x210>
 8002a18:	2310      	movs	r3, #16
 8002a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a1e:	e09b      	b.n	8002b58 <UART_SetConfig+0x210>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a76      	ldr	r2, [pc, #472]	@ (8002c00 <UART_SetConfig+0x2b8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d138      	bne.n	8002a9c <UART_SetConfig+0x154>
 8002a2a:	4b74      	ldr	r3, [pc, #464]	@ (8002bfc <UART_SetConfig+0x2b4>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d82d      	bhi.n	8002a94 <UART_SetConfig+0x14c>
 8002a38:	a201      	add	r2, pc, #4	@ (adr r2, 8002a40 <UART_SetConfig+0xf8>)
 8002a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002a75 	.word	0x08002a75
 8002a44:	08002a95 	.word	0x08002a95
 8002a48:	08002a95 	.word	0x08002a95
 8002a4c:	08002a95 	.word	0x08002a95
 8002a50:	08002a85 	.word	0x08002a85
 8002a54:	08002a95 	.word	0x08002a95
 8002a58:	08002a95 	.word	0x08002a95
 8002a5c:	08002a95 	.word	0x08002a95
 8002a60:	08002a7d 	.word	0x08002a7d
 8002a64:	08002a95 	.word	0x08002a95
 8002a68:	08002a95 	.word	0x08002a95
 8002a6c:	08002a95 	.word	0x08002a95
 8002a70:	08002a8d 	.word	0x08002a8d
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a7a:	e06d      	b.n	8002b58 <UART_SetConfig+0x210>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a82:	e069      	b.n	8002b58 <UART_SetConfig+0x210>
 8002a84:	2304      	movs	r3, #4
 8002a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8a:	e065      	b.n	8002b58 <UART_SetConfig+0x210>
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a92:	e061      	b.n	8002b58 <UART_SetConfig+0x210>
 8002a94:	2310      	movs	r3, #16
 8002a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9a:	e05d      	b.n	8002b58 <UART_SetConfig+0x210>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	@ (8002c04 <UART_SetConfig+0x2bc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d125      	bne.n	8002af2 <UART_SetConfig+0x1aa>
 8002aa6:	4b55      	ldr	r3, [pc, #340]	@ (8002bfc <UART_SetConfig+0x2b4>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ab0:	2b30      	cmp	r3, #48	@ 0x30
 8002ab2:	d016      	beq.n	8002ae2 <UART_SetConfig+0x19a>
 8002ab4:	2b30      	cmp	r3, #48	@ 0x30
 8002ab6:	d818      	bhi.n	8002aea <UART_SetConfig+0x1a2>
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d00a      	beq.n	8002ad2 <UART_SetConfig+0x18a>
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d814      	bhi.n	8002aea <UART_SetConfig+0x1a2>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <UART_SetConfig+0x182>
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d008      	beq.n	8002ada <UART_SetConfig+0x192>
 8002ac8:	e00f      	b.n	8002aea <UART_SetConfig+0x1a2>
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad0:	e042      	b.n	8002b58 <UART_SetConfig+0x210>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad8:	e03e      	b.n	8002b58 <UART_SetConfig+0x210>
 8002ada:	2304      	movs	r3, #4
 8002adc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ae0:	e03a      	b.n	8002b58 <UART_SetConfig+0x210>
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ae8:	e036      	b.n	8002b58 <UART_SetConfig+0x210>
 8002aea:	2310      	movs	r3, #16
 8002aec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af0:	e032      	b.n	8002b58 <UART_SetConfig+0x210>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a3f      	ldr	r2, [pc, #252]	@ (8002bf4 <UART_SetConfig+0x2ac>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d12a      	bne.n	8002b52 <UART_SetConfig+0x20a>
 8002afc:	4b3f      	ldr	r3, [pc, #252]	@ (8002bfc <UART_SetConfig+0x2b4>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b0a:	d01a      	beq.n	8002b42 <UART_SetConfig+0x1fa>
 8002b0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b10:	d81b      	bhi.n	8002b4a <UART_SetConfig+0x202>
 8002b12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b16:	d00c      	beq.n	8002b32 <UART_SetConfig+0x1ea>
 8002b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b1c:	d815      	bhi.n	8002b4a <UART_SetConfig+0x202>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <UART_SetConfig+0x1e2>
 8002b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b26:	d008      	beq.n	8002b3a <UART_SetConfig+0x1f2>
 8002b28:	e00f      	b.n	8002b4a <UART_SetConfig+0x202>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b30:	e012      	b.n	8002b58 <UART_SetConfig+0x210>
 8002b32:	2302      	movs	r3, #2
 8002b34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b38:	e00e      	b.n	8002b58 <UART_SetConfig+0x210>
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b40:	e00a      	b.n	8002b58 <UART_SetConfig+0x210>
 8002b42:	2308      	movs	r3, #8
 8002b44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b48:	e006      	b.n	8002b58 <UART_SetConfig+0x210>
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b50:	e002      	b.n	8002b58 <UART_SetConfig+0x210>
 8002b52:	2310      	movs	r3, #16
 8002b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a25      	ldr	r2, [pc, #148]	@ (8002bf4 <UART_SetConfig+0x2ac>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	f040 808a 	bne.w	8002c78 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d824      	bhi.n	8002bb6 <UART_SetConfig+0x26e>
 8002b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b74 <UART_SetConfig+0x22c>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002b99 	.word	0x08002b99
 8002b78:	08002bb7 	.word	0x08002bb7
 8002b7c:	08002ba1 	.word	0x08002ba1
 8002b80:	08002bb7 	.word	0x08002bb7
 8002b84:	08002ba7 	.word	0x08002ba7
 8002b88:	08002bb7 	.word	0x08002bb7
 8002b8c:	08002bb7 	.word	0x08002bb7
 8002b90:	08002bb7 	.word	0x08002bb7
 8002b94:	08002baf 	.word	0x08002baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b98:	f7ff f9c2 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8002b9c:	61f8      	str	r0, [r7, #28]
        break;
 8002b9e:	e010      	b.n	8002bc2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <UART_SetConfig+0x2c0>)
 8002ba2:	61fb      	str	r3, [r7, #28]
        break;
 8002ba4:	e00d      	b.n	8002bc2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ba6:	f7ff f923 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8002baa:	61f8      	str	r0, [r7, #28]
        break;
 8002bac:	e009      	b.n	8002bc2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bb2:	61fb      	str	r3, [r7, #28]
        break;
 8002bb4:	e005      	b.n	8002bc2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8109 	beq.w	8002ddc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d305      	bcc.n	8002be6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d912      	bls.n	8002c0c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bec:	e0f6      	b.n	8002ddc <UART_SetConfig+0x494>
 8002bee:	bf00      	nop
 8002bf0:	efff69f3 	.word	0xefff69f3
 8002bf4:	40008000 	.word	0x40008000
 8002bf8:	40013800 	.word	0x40013800
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40004400 	.word	0x40004400
 8002c04:	40004800 	.word	0x40004800
 8002c08:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	461c      	mov	r4, r3
 8002c12:	4615      	mov	r5, r2
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	022b      	lsls	r3, r5, #8
 8002c1e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c22:	0222      	lsls	r2, r4, #8
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	6849      	ldr	r1, [r1, #4]
 8002c28:	0849      	lsrs	r1, r1, #1
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	4688      	mov	r8, r1
 8002c2e:	4681      	mov	r9, r0
 8002c30:	eb12 0a08 	adds.w	sl, r2, r8
 8002c34:	eb43 0b09 	adc.w	fp, r3, r9
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c46:	4650      	mov	r0, sl
 8002c48:	4659      	mov	r1, fp
 8002c4a:	f7fd fb11 	bl	8000270 <__aeabi_uldivmod>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4613      	mov	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c5c:	d308      	bcc.n	8002c70 <UART_SetConfig+0x328>
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c64:	d204      	bcs.n	8002c70 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	e0b5      	b.n	8002ddc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c76:	e0b1      	b.n	8002ddc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c80:	d15d      	bne.n	8002d3e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002c82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d827      	bhi.n	8002cda <UART_SetConfig+0x392>
 8002c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c90 <UART_SetConfig+0x348>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cb5 	.word	0x08002cb5
 8002c94:	08002cbd 	.word	0x08002cbd
 8002c98:	08002cc5 	.word	0x08002cc5
 8002c9c:	08002cdb 	.word	0x08002cdb
 8002ca0:	08002ccb 	.word	0x08002ccb
 8002ca4:	08002cdb 	.word	0x08002cdb
 8002ca8:	08002cdb 	.word	0x08002cdb
 8002cac:	08002cdb 	.word	0x08002cdb
 8002cb0:	08002cd3 	.word	0x08002cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f7ff f934 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8002cb8:	61f8      	str	r0, [r7, #28]
        break;
 8002cba:	e014      	b.n	8002ce6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cbc:	f7ff f946 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8002cc0:	61f8      	str	r0, [r7, #28]
        break;
 8002cc2:	e010      	b.n	8002ce6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002df8 <UART_SetConfig+0x4b0>)
 8002cc6:	61fb      	str	r3, [r7, #28]
        break;
 8002cc8:	e00d      	b.n	8002ce6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cca:	f7ff f891 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8002cce:	61f8      	str	r0, [r7, #28]
        break;
 8002cd0:	e009      	b.n	8002ce6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cd6:	61fb      	str	r3, [r7, #28]
        break;
 8002cd8:	e005      	b.n	8002ce6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d077      	beq.n	8002ddc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005a      	lsls	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b0f      	cmp	r3, #15
 8002d06:	d916      	bls.n	8002d36 <UART_SetConfig+0x3ee>
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d0e:	d212      	bcs.n	8002d36 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f023 030f 	bic.w	r3, r3, #15
 8002d18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	8afb      	ldrh	r3, [r7, #22]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	8afa      	ldrh	r2, [r7, #22]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	e052      	b.n	8002ddc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d3c:	e04e      	b.n	8002ddc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d827      	bhi.n	8002d96 <UART_SetConfig+0x44e>
 8002d46:	a201      	add	r2, pc, #4	@ (adr r2, 8002d4c <UART_SetConfig+0x404>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002d71 	.word	0x08002d71
 8002d50:	08002d79 	.word	0x08002d79
 8002d54:	08002d81 	.word	0x08002d81
 8002d58:	08002d97 	.word	0x08002d97
 8002d5c:	08002d87 	.word	0x08002d87
 8002d60:	08002d97 	.word	0x08002d97
 8002d64:	08002d97 	.word	0x08002d97
 8002d68:	08002d97 	.word	0x08002d97
 8002d6c:	08002d8f 	.word	0x08002d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d70:	f7ff f8d6 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 8002d74:	61f8      	str	r0, [r7, #28]
        break;
 8002d76:	e014      	b.n	8002da2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d78:	f7ff f8e8 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8002d7c:	61f8      	str	r0, [r7, #28]
        break;
 8002d7e:	e010      	b.n	8002da2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d80:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <UART_SetConfig+0x4b0>)
 8002d82:	61fb      	str	r3, [r7, #28]
        break;
 8002d84:	e00d      	b.n	8002da2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d86:	f7ff f833 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8002d8a:	61f8      	str	r0, [r7, #28]
        break;
 8002d8c:	e009      	b.n	8002da2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d92:	61fb      	str	r3, [r7, #28]
        break;
 8002d94:	e005      	b.n	8002da2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002da0:	bf00      	nop
    }

    if (pclk != 0U)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d019      	beq.n	8002ddc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	085a      	lsrs	r2, r3, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	441a      	add	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b0f      	cmp	r3, #15
 8002dc0:	d909      	bls.n	8002dd6 <UART_SetConfig+0x48e>
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc8:	d205      	bcs.n	8002dd6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	e002      	b.n	8002ddc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002de8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3728      	adds	r7, #40	@ 0x28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df6:	bf00      	nop
 8002df8:	00f42400 	.word	0x00f42400

08002dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01a      	beq.n	8002f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002efa:	d10a      	bne.n	8002f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  }
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b098      	sub	sp, #96	@ 0x60
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f50:	f7fd fe48 	bl	8000be4 <HAL_GetTick>
 8002f54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d12e      	bne.n	8002fc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f88c 	bl	8003090 <UART_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d021      	beq.n	8002fc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f86:	e853 3f00 	ldrex	r3, [r3]
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f92:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fa4:	e841 2300 	strex	r3, r2, [r1]
 8002fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e6      	bne.n	8002f7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e062      	b.n	8003088 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d149      	bne.n	8003064 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f856 	bl	8003090 <UART_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d03c      	beq.n	8003064 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003008:	633b      	str	r3, [r7, #48]	@ 0x30
 800300a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800300e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e6      	bne.n	8002fea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3308      	adds	r3, #8
 8003022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	60fb      	str	r3, [r7, #12]
   return(result);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3308      	adds	r3, #8
 800303a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800303c:	61fa      	str	r2, [r7, #28]
 800303e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	69b9      	ldr	r1, [r7, #24]
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	e841 2300 	strex	r3, r2, [r1]
 8003048:	617b      	str	r3, [r7, #20]
   return(result);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e5      	bne.n	800301c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e011      	b.n	8003088 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3758      	adds	r7, #88	@ 0x58
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a0:	e04f      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d04b      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fd fd9b 	bl	8000be4 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e04e      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d037      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b80      	cmp	r3, #128	@ 0x80
 80030d6:	d034      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b40      	cmp	r3, #64	@ 0x40
 80030dc:	d031      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d110      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2208      	movs	r2, #8
 80030f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f838 	bl	800316a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2208      	movs	r2, #8
 80030fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e029      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800311c:	d111      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f81e 	bl	800316a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e00f      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	429a      	cmp	r2, r3
 800315e:	d0a0      	beq.n	80030a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800316a:	b480      	push	{r7}
 800316c:	b095      	sub	sp, #84	@ 0x54
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317a:	e853 3f00 	ldrex	r3, [r3]
 800317e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003182:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003190:	643b      	str	r3, [r7, #64]	@ 0x40
 8003192:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003196:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800319e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e6      	bne.n	8003172 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3308      	adds	r3, #8
 80031aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3308      	adds	r3, #8
 80031c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e5      	bne.n	80031a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d118      	bne.n	8003212 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f023 0310 	bic.w	r3, r3, #16
 80031f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6979      	ldr	r1, [r7, #20]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	613b      	str	r3, [r7, #16]
   return(result);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e6      	bne.n	80031e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003226:	bf00      	nop
 8003228:	3754      	adds	r7, #84	@ 0x54
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <siprintf>:
 8003234:	b40e      	push	{r1, r2, r3}
 8003236:	b500      	push	{lr}
 8003238:	b09c      	sub	sp, #112	@ 0x70
 800323a:	ab1d      	add	r3, sp, #116	@ 0x74
 800323c:	9002      	str	r0, [sp, #8]
 800323e:	9006      	str	r0, [sp, #24]
 8003240:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003244:	4809      	ldr	r0, [pc, #36]	@ (800326c <siprintf+0x38>)
 8003246:	9107      	str	r1, [sp, #28]
 8003248:	9104      	str	r1, [sp, #16]
 800324a:	4909      	ldr	r1, [pc, #36]	@ (8003270 <siprintf+0x3c>)
 800324c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003250:	9105      	str	r1, [sp, #20]
 8003252:	6800      	ldr	r0, [r0, #0]
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	a902      	add	r1, sp, #8
 8003258:	f000 f994 	bl	8003584 <_svfiprintf_r>
 800325c:	9b02      	ldr	r3, [sp, #8]
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	b01c      	add	sp, #112	@ 0x70
 8003264:	f85d eb04 	ldr.w	lr, [sp], #4
 8003268:	b003      	add	sp, #12
 800326a:	4770      	bx	lr
 800326c:	2000000c 	.word	0x2000000c
 8003270:	ffff0208 	.word	0xffff0208

08003274 <memset>:
 8003274:	4402      	add	r2, r0
 8003276:	4603      	mov	r3, r0
 8003278:	4293      	cmp	r3, r2
 800327a:	d100      	bne.n	800327e <memset+0xa>
 800327c:	4770      	bx	lr
 800327e:	f803 1b01 	strb.w	r1, [r3], #1
 8003282:	e7f9      	b.n	8003278 <memset+0x4>

08003284 <__errno>:
 8003284:	4b01      	ldr	r3, [pc, #4]	@ (800328c <__errno+0x8>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4d0d      	ldr	r5, [pc, #52]	@ (80032c8 <__libc_init_array+0x38>)
 8003294:	4c0d      	ldr	r4, [pc, #52]	@ (80032cc <__libc_init_array+0x3c>)
 8003296:	1b64      	subs	r4, r4, r5
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	2600      	movs	r6, #0
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	4d0b      	ldr	r5, [pc, #44]	@ (80032d0 <__libc_init_array+0x40>)
 80032a2:	4c0c      	ldr	r4, [pc, #48]	@ (80032d4 <__libc_init_array+0x44>)
 80032a4:	f000 fc66 	bl	8003b74 <_init>
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	2600      	movs	r6, #0
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003c38 	.word	0x08003c38
 80032cc:	08003c38 	.word	0x08003c38
 80032d0:	08003c38 	.word	0x08003c38
 80032d4:	08003c3c 	.word	0x08003c3c

080032d8 <__retarget_lock_acquire_recursive>:
 80032d8:	4770      	bx	lr

080032da <__retarget_lock_release_recursive>:
 80032da:	4770      	bx	lr

080032dc <_free_r>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	4605      	mov	r5, r0
 80032e0:	2900      	cmp	r1, #0
 80032e2:	d041      	beq.n	8003368 <_free_r+0x8c>
 80032e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032e8:	1f0c      	subs	r4, r1, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bfb8      	it	lt
 80032ee:	18e4      	addlt	r4, r4, r3
 80032f0:	f000 f8e0 	bl	80034b4 <__malloc_lock>
 80032f4:	4a1d      	ldr	r2, [pc, #116]	@ (800336c <_free_r+0x90>)
 80032f6:	6813      	ldr	r3, [r2, #0]
 80032f8:	b933      	cbnz	r3, 8003308 <_free_r+0x2c>
 80032fa:	6063      	str	r3, [r4, #4]
 80032fc:	6014      	str	r4, [r2, #0]
 80032fe:	4628      	mov	r0, r5
 8003300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003304:	f000 b8dc 	b.w	80034c0 <__malloc_unlock>
 8003308:	42a3      	cmp	r3, r4
 800330a:	d908      	bls.n	800331e <_free_r+0x42>
 800330c:	6820      	ldr	r0, [r4, #0]
 800330e:	1821      	adds	r1, r4, r0
 8003310:	428b      	cmp	r3, r1
 8003312:	bf01      	itttt	eq
 8003314:	6819      	ldreq	r1, [r3, #0]
 8003316:	685b      	ldreq	r3, [r3, #4]
 8003318:	1809      	addeq	r1, r1, r0
 800331a:	6021      	streq	r1, [r4, #0]
 800331c:	e7ed      	b.n	80032fa <_free_r+0x1e>
 800331e:	461a      	mov	r2, r3
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	b10b      	cbz	r3, 8003328 <_free_r+0x4c>
 8003324:	42a3      	cmp	r3, r4
 8003326:	d9fa      	bls.n	800331e <_free_r+0x42>
 8003328:	6811      	ldr	r1, [r2, #0]
 800332a:	1850      	adds	r0, r2, r1
 800332c:	42a0      	cmp	r0, r4
 800332e:	d10b      	bne.n	8003348 <_free_r+0x6c>
 8003330:	6820      	ldr	r0, [r4, #0]
 8003332:	4401      	add	r1, r0
 8003334:	1850      	adds	r0, r2, r1
 8003336:	4283      	cmp	r3, r0
 8003338:	6011      	str	r1, [r2, #0]
 800333a:	d1e0      	bne.n	80032fe <_free_r+0x22>
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	6053      	str	r3, [r2, #4]
 8003342:	4408      	add	r0, r1
 8003344:	6010      	str	r0, [r2, #0]
 8003346:	e7da      	b.n	80032fe <_free_r+0x22>
 8003348:	d902      	bls.n	8003350 <_free_r+0x74>
 800334a:	230c      	movs	r3, #12
 800334c:	602b      	str	r3, [r5, #0]
 800334e:	e7d6      	b.n	80032fe <_free_r+0x22>
 8003350:	6820      	ldr	r0, [r4, #0]
 8003352:	1821      	adds	r1, r4, r0
 8003354:	428b      	cmp	r3, r1
 8003356:	bf04      	itt	eq
 8003358:	6819      	ldreq	r1, [r3, #0]
 800335a:	685b      	ldreq	r3, [r3, #4]
 800335c:	6063      	str	r3, [r4, #4]
 800335e:	bf04      	itt	eq
 8003360:	1809      	addeq	r1, r1, r0
 8003362:	6021      	streq	r1, [r4, #0]
 8003364:	6054      	str	r4, [r2, #4]
 8003366:	e7ca      	b.n	80032fe <_free_r+0x22>
 8003368:	bd38      	pop	{r3, r4, r5, pc}
 800336a:	bf00      	nop
 800336c:	20000278 	.word	0x20000278

08003370 <sbrk_aligned>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	4e0f      	ldr	r6, [pc, #60]	@ (80033b0 <sbrk_aligned+0x40>)
 8003374:	460c      	mov	r4, r1
 8003376:	6831      	ldr	r1, [r6, #0]
 8003378:	4605      	mov	r5, r0
 800337a:	b911      	cbnz	r1, 8003382 <sbrk_aligned+0x12>
 800337c:	f000 fba6 	bl	8003acc <_sbrk_r>
 8003380:	6030      	str	r0, [r6, #0]
 8003382:	4621      	mov	r1, r4
 8003384:	4628      	mov	r0, r5
 8003386:	f000 fba1 	bl	8003acc <_sbrk_r>
 800338a:	1c43      	adds	r3, r0, #1
 800338c:	d103      	bne.n	8003396 <sbrk_aligned+0x26>
 800338e:	f04f 34ff 	mov.w	r4, #4294967295
 8003392:	4620      	mov	r0, r4
 8003394:	bd70      	pop	{r4, r5, r6, pc}
 8003396:	1cc4      	adds	r4, r0, #3
 8003398:	f024 0403 	bic.w	r4, r4, #3
 800339c:	42a0      	cmp	r0, r4
 800339e:	d0f8      	beq.n	8003392 <sbrk_aligned+0x22>
 80033a0:	1a21      	subs	r1, r4, r0
 80033a2:	4628      	mov	r0, r5
 80033a4:	f000 fb92 	bl	8003acc <_sbrk_r>
 80033a8:	3001      	adds	r0, #1
 80033aa:	d1f2      	bne.n	8003392 <sbrk_aligned+0x22>
 80033ac:	e7ef      	b.n	800338e <sbrk_aligned+0x1e>
 80033ae:	bf00      	nop
 80033b0:	20000274 	.word	0x20000274

080033b4 <_malloc_r>:
 80033b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033b8:	1ccd      	adds	r5, r1, #3
 80033ba:	f025 0503 	bic.w	r5, r5, #3
 80033be:	3508      	adds	r5, #8
 80033c0:	2d0c      	cmp	r5, #12
 80033c2:	bf38      	it	cc
 80033c4:	250c      	movcc	r5, #12
 80033c6:	2d00      	cmp	r5, #0
 80033c8:	4606      	mov	r6, r0
 80033ca:	db01      	blt.n	80033d0 <_malloc_r+0x1c>
 80033cc:	42a9      	cmp	r1, r5
 80033ce:	d904      	bls.n	80033da <_malloc_r+0x26>
 80033d0:	230c      	movs	r3, #12
 80033d2:	6033      	str	r3, [r6, #0]
 80033d4:	2000      	movs	r0, #0
 80033d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034b0 <_malloc_r+0xfc>
 80033de:	f000 f869 	bl	80034b4 <__malloc_lock>
 80033e2:	f8d8 3000 	ldr.w	r3, [r8]
 80033e6:	461c      	mov	r4, r3
 80033e8:	bb44      	cbnz	r4, 800343c <_malloc_r+0x88>
 80033ea:	4629      	mov	r1, r5
 80033ec:	4630      	mov	r0, r6
 80033ee:	f7ff ffbf 	bl	8003370 <sbrk_aligned>
 80033f2:	1c43      	adds	r3, r0, #1
 80033f4:	4604      	mov	r4, r0
 80033f6:	d158      	bne.n	80034aa <_malloc_r+0xf6>
 80033f8:	f8d8 4000 	ldr.w	r4, [r8]
 80033fc:	4627      	mov	r7, r4
 80033fe:	2f00      	cmp	r7, #0
 8003400:	d143      	bne.n	800348a <_malloc_r+0xd6>
 8003402:	2c00      	cmp	r4, #0
 8003404:	d04b      	beq.n	800349e <_malloc_r+0xea>
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	4639      	mov	r1, r7
 800340a:	4630      	mov	r0, r6
 800340c:	eb04 0903 	add.w	r9, r4, r3
 8003410:	f000 fb5c 	bl	8003acc <_sbrk_r>
 8003414:	4581      	cmp	r9, r0
 8003416:	d142      	bne.n	800349e <_malloc_r+0xea>
 8003418:	6821      	ldr	r1, [r4, #0]
 800341a:	1a6d      	subs	r5, r5, r1
 800341c:	4629      	mov	r1, r5
 800341e:	4630      	mov	r0, r6
 8003420:	f7ff ffa6 	bl	8003370 <sbrk_aligned>
 8003424:	3001      	adds	r0, #1
 8003426:	d03a      	beq.n	800349e <_malloc_r+0xea>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	442b      	add	r3, r5
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	f8d8 3000 	ldr.w	r3, [r8]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	bb62      	cbnz	r2, 8003490 <_malloc_r+0xdc>
 8003436:	f8c8 7000 	str.w	r7, [r8]
 800343a:	e00f      	b.n	800345c <_malloc_r+0xa8>
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	1b52      	subs	r2, r2, r5
 8003440:	d420      	bmi.n	8003484 <_malloc_r+0xd0>
 8003442:	2a0b      	cmp	r2, #11
 8003444:	d917      	bls.n	8003476 <_malloc_r+0xc2>
 8003446:	1961      	adds	r1, r4, r5
 8003448:	42a3      	cmp	r3, r4
 800344a:	6025      	str	r5, [r4, #0]
 800344c:	bf18      	it	ne
 800344e:	6059      	strne	r1, [r3, #4]
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	bf08      	it	eq
 8003454:	f8c8 1000 	streq.w	r1, [r8]
 8003458:	5162      	str	r2, [r4, r5]
 800345a:	604b      	str	r3, [r1, #4]
 800345c:	4630      	mov	r0, r6
 800345e:	f000 f82f 	bl	80034c0 <__malloc_unlock>
 8003462:	f104 000b 	add.w	r0, r4, #11
 8003466:	1d23      	adds	r3, r4, #4
 8003468:	f020 0007 	bic.w	r0, r0, #7
 800346c:	1ac2      	subs	r2, r0, r3
 800346e:	bf1c      	itt	ne
 8003470:	1a1b      	subne	r3, r3, r0
 8003472:	50a3      	strne	r3, [r4, r2]
 8003474:	e7af      	b.n	80033d6 <_malloc_r+0x22>
 8003476:	6862      	ldr	r2, [r4, #4]
 8003478:	42a3      	cmp	r3, r4
 800347a:	bf0c      	ite	eq
 800347c:	f8c8 2000 	streq.w	r2, [r8]
 8003480:	605a      	strne	r2, [r3, #4]
 8003482:	e7eb      	b.n	800345c <_malloc_r+0xa8>
 8003484:	4623      	mov	r3, r4
 8003486:	6864      	ldr	r4, [r4, #4]
 8003488:	e7ae      	b.n	80033e8 <_malloc_r+0x34>
 800348a:	463c      	mov	r4, r7
 800348c:	687f      	ldr	r7, [r7, #4]
 800348e:	e7b6      	b.n	80033fe <_malloc_r+0x4a>
 8003490:	461a      	mov	r2, r3
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	42a3      	cmp	r3, r4
 8003496:	d1fb      	bne.n	8003490 <_malloc_r+0xdc>
 8003498:	2300      	movs	r3, #0
 800349a:	6053      	str	r3, [r2, #4]
 800349c:	e7de      	b.n	800345c <_malloc_r+0xa8>
 800349e:	230c      	movs	r3, #12
 80034a0:	6033      	str	r3, [r6, #0]
 80034a2:	4630      	mov	r0, r6
 80034a4:	f000 f80c 	bl	80034c0 <__malloc_unlock>
 80034a8:	e794      	b.n	80033d4 <_malloc_r+0x20>
 80034aa:	6005      	str	r5, [r0, #0]
 80034ac:	e7d6      	b.n	800345c <_malloc_r+0xa8>
 80034ae:	bf00      	nop
 80034b0:	20000278 	.word	0x20000278

080034b4 <__malloc_lock>:
 80034b4:	4801      	ldr	r0, [pc, #4]	@ (80034bc <__malloc_lock+0x8>)
 80034b6:	f7ff bf0f 	b.w	80032d8 <__retarget_lock_acquire_recursive>
 80034ba:	bf00      	nop
 80034bc:	20000270 	.word	0x20000270

080034c0 <__malloc_unlock>:
 80034c0:	4801      	ldr	r0, [pc, #4]	@ (80034c8 <__malloc_unlock+0x8>)
 80034c2:	f7ff bf0a 	b.w	80032da <__retarget_lock_release_recursive>
 80034c6:	bf00      	nop
 80034c8:	20000270 	.word	0x20000270

080034cc <__ssputs_r>:
 80034cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	688e      	ldr	r6, [r1, #8]
 80034d2:	461f      	mov	r7, r3
 80034d4:	42be      	cmp	r6, r7
 80034d6:	680b      	ldr	r3, [r1, #0]
 80034d8:	4682      	mov	sl, r0
 80034da:	460c      	mov	r4, r1
 80034dc:	4690      	mov	r8, r2
 80034de:	d82d      	bhi.n	800353c <__ssputs_r+0x70>
 80034e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80034e8:	d026      	beq.n	8003538 <__ssputs_r+0x6c>
 80034ea:	6965      	ldr	r5, [r4, #20]
 80034ec:	6909      	ldr	r1, [r1, #16]
 80034ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034f2:	eba3 0901 	sub.w	r9, r3, r1
 80034f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034fa:	1c7b      	adds	r3, r7, #1
 80034fc:	444b      	add	r3, r9
 80034fe:	106d      	asrs	r5, r5, #1
 8003500:	429d      	cmp	r5, r3
 8003502:	bf38      	it	cc
 8003504:	461d      	movcc	r5, r3
 8003506:	0553      	lsls	r3, r2, #21
 8003508:	d527      	bpl.n	800355a <__ssputs_r+0x8e>
 800350a:	4629      	mov	r1, r5
 800350c:	f7ff ff52 	bl	80033b4 <_malloc_r>
 8003510:	4606      	mov	r6, r0
 8003512:	b360      	cbz	r0, 800356e <__ssputs_r+0xa2>
 8003514:	6921      	ldr	r1, [r4, #16]
 8003516:	464a      	mov	r2, r9
 8003518:	f000 fae8 	bl	8003aec <memcpy>
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003526:	81a3      	strh	r3, [r4, #12]
 8003528:	6126      	str	r6, [r4, #16]
 800352a:	6165      	str	r5, [r4, #20]
 800352c:	444e      	add	r6, r9
 800352e:	eba5 0509 	sub.w	r5, r5, r9
 8003532:	6026      	str	r6, [r4, #0]
 8003534:	60a5      	str	r5, [r4, #8]
 8003536:	463e      	mov	r6, r7
 8003538:	42be      	cmp	r6, r7
 800353a:	d900      	bls.n	800353e <__ssputs_r+0x72>
 800353c:	463e      	mov	r6, r7
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	4632      	mov	r2, r6
 8003542:	4641      	mov	r1, r8
 8003544:	f000 faa8 	bl	8003a98 <memmove>
 8003548:	68a3      	ldr	r3, [r4, #8]
 800354a:	1b9b      	subs	r3, r3, r6
 800354c:	60a3      	str	r3, [r4, #8]
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	4433      	add	r3, r6
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	2000      	movs	r0, #0
 8003556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355a:	462a      	mov	r2, r5
 800355c:	f000 fad4 	bl	8003b08 <_realloc_r>
 8003560:	4606      	mov	r6, r0
 8003562:	2800      	cmp	r0, #0
 8003564:	d1e0      	bne.n	8003528 <__ssputs_r+0x5c>
 8003566:	6921      	ldr	r1, [r4, #16]
 8003568:	4650      	mov	r0, sl
 800356a:	f7ff feb7 	bl	80032dc <_free_r>
 800356e:	230c      	movs	r3, #12
 8003570:	f8ca 3000 	str.w	r3, [sl]
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800357a:	81a3      	strh	r3, [r4, #12]
 800357c:	f04f 30ff 	mov.w	r0, #4294967295
 8003580:	e7e9      	b.n	8003556 <__ssputs_r+0x8a>
	...

08003584 <_svfiprintf_r>:
 8003584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003588:	4698      	mov	r8, r3
 800358a:	898b      	ldrh	r3, [r1, #12]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	b09d      	sub	sp, #116	@ 0x74
 8003590:	4607      	mov	r7, r0
 8003592:	460d      	mov	r5, r1
 8003594:	4614      	mov	r4, r2
 8003596:	d510      	bpl.n	80035ba <_svfiprintf_r+0x36>
 8003598:	690b      	ldr	r3, [r1, #16]
 800359a:	b973      	cbnz	r3, 80035ba <_svfiprintf_r+0x36>
 800359c:	2140      	movs	r1, #64	@ 0x40
 800359e:	f7ff ff09 	bl	80033b4 <_malloc_r>
 80035a2:	6028      	str	r0, [r5, #0]
 80035a4:	6128      	str	r0, [r5, #16]
 80035a6:	b930      	cbnz	r0, 80035b6 <_svfiprintf_r+0x32>
 80035a8:	230c      	movs	r3, #12
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295
 80035b0:	b01d      	add	sp, #116	@ 0x74
 80035b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b6:	2340      	movs	r3, #64	@ 0x40
 80035b8:	616b      	str	r3, [r5, #20]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80035be:	2320      	movs	r3, #32
 80035c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80035c8:	2330      	movs	r3, #48	@ 0x30
 80035ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003768 <_svfiprintf_r+0x1e4>
 80035ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035d2:	f04f 0901 	mov.w	r9, #1
 80035d6:	4623      	mov	r3, r4
 80035d8:	469a      	mov	sl, r3
 80035da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035de:	b10a      	cbz	r2, 80035e4 <_svfiprintf_r+0x60>
 80035e0:	2a25      	cmp	r2, #37	@ 0x25
 80035e2:	d1f9      	bne.n	80035d8 <_svfiprintf_r+0x54>
 80035e4:	ebba 0b04 	subs.w	fp, sl, r4
 80035e8:	d00b      	beq.n	8003602 <_svfiprintf_r+0x7e>
 80035ea:	465b      	mov	r3, fp
 80035ec:	4622      	mov	r2, r4
 80035ee:	4629      	mov	r1, r5
 80035f0:	4638      	mov	r0, r7
 80035f2:	f7ff ff6b 	bl	80034cc <__ssputs_r>
 80035f6:	3001      	adds	r0, #1
 80035f8:	f000 80a7 	beq.w	800374a <_svfiprintf_r+0x1c6>
 80035fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035fe:	445a      	add	r2, fp
 8003600:	9209      	str	r2, [sp, #36]	@ 0x24
 8003602:	f89a 3000 	ldrb.w	r3, [sl]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 809f 	beq.w	800374a <_svfiprintf_r+0x1c6>
 800360c:	2300      	movs	r3, #0
 800360e:	f04f 32ff 	mov.w	r2, #4294967295
 8003612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003616:	f10a 0a01 	add.w	sl, sl, #1
 800361a:	9304      	str	r3, [sp, #16]
 800361c:	9307      	str	r3, [sp, #28]
 800361e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003622:	931a      	str	r3, [sp, #104]	@ 0x68
 8003624:	4654      	mov	r4, sl
 8003626:	2205      	movs	r2, #5
 8003628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800362c:	484e      	ldr	r0, [pc, #312]	@ (8003768 <_svfiprintf_r+0x1e4>)
 800362e:	f7fc fdcf 	bl	80001d0 <memchr>
 8003632:	9a04      	ldr	r2, [sp, #16]
 8003634:	b9d8      	cbnz	r0, 800366e <_svfiprintf_r+0xea>
 8003636:	06d0      	lsls	r0, r2, #27
 8003638:	bf44      	itt	mi
 800363a:	2320      	movmi	r3, #32
 800363c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003640:	0711      	lsls	r1, r2, #28
 8003642:	bf44      	itt	mi
 8003644:	232b      	movmi	r3, #43	@ 0x2b
 8003646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800364a:	f89a 3000 	ldrb.w	r3, [sl]
 800364e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003650:	d015      	beq.n	800367e <_svfiprintf_r+0xfa>
 8003652:	9a07      	ldr	r2, [sp, #28]
 8003654:	4654      	mov	r4, sl
 8003656:	2000      	movs	r0, #0
 8003658:	f04f 0c0a 	mov.w	ip, #10
 800365c:	4621      	mov	r1, r4
 800365e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003662:	3b30      	subs	r3, #48	@ 0x30
 8003664:	2b09      	cmp	r3, #9
 8003666:	d94b      	bls.n	8003700 <_svfiprintf_r+0x17c>
 8003668:	b1b0      	cbz	r0, 8003698 <_svfiprintf_r+0x114>
 800366a:	9207      	str	r2, [sp, #28]
 800366c:	e014      	b.n	8003698 <_svfiprintf_r+0x114>
 800366e:	eba0 0308 	sub.w	r3, r0, r8
 8003672:	fa09 f303 	lsl.w	r3, r9, r3
 8003676:	4313      	orrs	r3, r2
 8003678:	9304      	str	r3, [sp, #16]
 800367a:	46a2      	mov	sl, r4
 800367c:	e7d2      	b.n	8003624 <_svfiprintf_r+0xa0>
 800367e:	9b03      	ldr	r3, [sp, #12]
 8003680:	1d19      	adds	r1, r3, #4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	9103      	str	r1, [sp, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	bfbb      	ittet	lt
 800368a:	425b      	neglt	r3, r3
 800368c:	f042 0202 	orrlt.w	r2, r2, #2
 8003690:	9307      	strge	r3, [sp, #28]
 8003692:	9307      	strlt	r3, [sp, #28]
 8003694:	bfb8      	it	lt
 8003696:	9204      	strlt	r2, [sp, #16]
 8003698:	7823      	ldrb	r3, [r4, #0]
 800369a:	2b2e      	cmp	r3, #46	@ 0x2e
 800369c:	d10a      	bne.n	80036b4 <_svfiprintf_r+0x130>
 800369e:	7863      	ldrb	r3, [r4, #1]
 80036a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80036a2:	d132      	bne.n	800370a <_svfiprintf_r+0x186>
 80036a4:	9b03      	ldr	r3, [sp, #12]
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	9203      	str	r2, [sp, #12]
 80036ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036b0:	3402      	adds	r4, #2
 80036b2:	9305      	str	r3, [sp, #20]
 80036b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003778 <_svfiprintf_r+0x1f4>
 80036b8:	7821      	ldrb	r1, [r4, #0]
 80036ba:	2203      	movs	r2, #3
 80036bc:	4650      	mov	r0, sl
 80036be:	f7fc fd87 	bl	80001d0 <memchr>
 80036c2:	b138      	cbz	r0, 80036d4 <_svfiprintf_r+0x150>
 80036c4:	9b04      	ldr	r3, [sp, #16]
 80036c6:	eba0 000a 	sub.w	r0, r0, sl
 80036ca:	2240      	movs	r2, #64	@ 0x40
 80036cc:	4082      	lsls	r2, r0
 80036ce:	4313      	orrs	r3, r2
 80036d0:	3401      	adds	r4, #1
 80036d2:	9304      	str	r3, [sp, #16]
 80036d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d8:	4824      	ldr	r0, [pc, #144]	@ (800376c <_svfiprintf_r+0x1e8>)
 80036da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036de:	2206      	movs	r2, #6
 80036e0:	f7fc fd76 	bl	80001d0 <memchr>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d036      	beq.n	8003756 <_svfiprintf_r+0x1d2>
 80036e8:	4b21      	ldr	r3, [pc, #132]	@ (8003770 <_svfiprintf_r+0x1ec>)
 80036ea:	bb1b      	cbnz	r3, 8003734 <_svfiprintf_r+0x1b0>
 80036ec:	9b03      	ldr	r3, [sp, #12]
 80036ee:	3307      	adds	r3, #7
 80036f0:	f023 0307 	bic.w	r3, r3, #7
 80036f4:	3308      	adds	r3, #8
 80036f6:	9303      	str	r3, [sp, #12]
 80036f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036fa:	4433      	add	r3, r6
 80036fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80036fe:	e76a      	b.n	80035d6 <_svfiprintf_r+0x52>
 8003700:	fb0c 3202 	mla	r2, ip, r2, r3
 8003704:	460c      	mov	r4, r1
 8003706:	2001      	movs	r0, #1
 8003708:	e7a8      	b.n	800365c <_svfiprintf_r+0xd8>
 800370a:	2300      	movs	r3, #0
 800370c:	3401      	adds	r4, #1
 800370e:	9305      	str	r3, [sp, #20]
 8003710:	4619      	mov	r1, r3
 8003712:	f04f 0c0a 	mov.w	ip, #10
 8003716:	4620      	mov	r0, r4
 8003718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800371c:	3a30      	subs	r2, #48	@ 0x30
 800371e:	2a09      	cmp	r2, #9
 8003720:	d903      	bls.n	800372a <_svfiprintf_r+0x1a6>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0c6      	beq.n	80036b4 <_svfiprintf_r+0x130>
 8003726:	9105      	str	r1, [sp, #20]
 8003728:	e7c4      	b.n	80036b4 <_svfiprintf_r+0x130>
 800372a:	fb0c 2101 	mla	r1, ip, r1, r2
 800372e:	4604      	mov	r4, r0
 8003730:	2301      	movs	r3, #1
 8003732:	e7f0      	b.n	8003716 <_svfiprintf_r+0x192>
 8003734:	ab03      	add	r3, sp, #12
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	462a      	mov	r2, r5
 800373a:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <_svfiprintf_r+0x1f0>)
 800373c:	a904      	add	r1, sp, #16
 800373e:	4638      	mov	r0, r7
 8003740:	f3af 8000 	nop.w
 8003744:	1c42      	adds	r2, r0, #1
 8003746:	4606      	mov	r6, r0
 8003748:	d1d6      	bne.n	80036f8 <_svfiprintf_r+0x174>
 800374a:	89ab      	ldrh	r3, [r5, #12]
 800374c:	065b      	lsls	r3, r3, #25
 800374e:	f53f af2d 	bmi.w	80035ac <_svfiprintf_r+0x28>
 8003752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003754:	e72c      	b.n	80035b0 <_svfiprintf_r+0x2c>
 8003756:	ab03      	add	r3, sp, #12
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	462a      	mov	r2, r5
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <_svfiprintf_r+0x1f0>)
 800375e:	a904      	add	r1, sp, #16
 8003760:	4638      	mov	r0, r7
 8003762:	f000 f879 	bl	8003858 <_printf_i>
 8003766:	e7ed      	b.n	8003744 <_svfiprintf_r+0x1c0>
 8003768:	08003bfc 	.word	0x08003bfc
 800376c:	08003c06 	.word	0x08003c06
 8003770:	00000000 	.word	0x00000000
 8003774:	080034cd 	.word	0x080034cd
 8003778:	08003c02 	.word	0x08003c02

0800377c <_printf_common>:
 800377c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003780:	4616      	mov	r6, r2
 8003782:	4698      	mov	r8, r3
 8003784:	688a      	ldr	r2, [r1, #8]
 8003786:	690b      	ldr	r3, [r1, #16]
 8003788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800378c:	4293      	cmp	r3, r2
 800378e:	bfb8      	it	lt
 8003790:	4613      	movlt	r3, r2
 8003792:	6033      	str	r3, [r6, #0]
 8003794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003798:	4607      	mov	r7, r0
 800379a:	460c      	mov	r4, r1
 800379c:	b10a      	cbz	r2, 80037a2 <_printf_common+0x26>
 800379e:	3301      	adds	r3, #1
 80037a0:	6033      	str	r3, [r6, #0]
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	0699      	lsls	r1, r3, #26
 80037a6:	bf42      	ittt	mi
 80037a8:	6833      	ldrmi	r3, [r6, #0]
 80037aa:	3302      	addmi	r3, #2
 80037ac:	6033      	strmi	r3, [r6, #0]
 80037ae:	6825      	ldr	r5, [r4, #0]
 80037b0:	f015 0506 	ands.w	r5, r5, #6
 80037b4:	d106      	bne.n	80037c4 <_printf_common+0x48>
 80037b6:	f104 0a19 	add.w	sl, r4, #25
 80037ba:	68e3      	ldr	r3, [r4, #12]
 80037bc:	6832      	ldr	r2, [r6, #0]
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	42ab      	cmp	r3, r5
 80037c2:	dc26      	bgt.n	8003812 <_printf_common+0x96>
 80037c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037c8:	6822      	ldr	r2, [r4, #0]
 80037ca:	3b00      	subs	r3, #0
 80037cc:	bf18      	it	ne
 80037ce:	2301      	movne	r3, #1
 80037d0:	0692      	lsls	r2, r2, #26
 80037d2:	d42b      	bmi.n	800382c <_printf_common+0xb0>
 80037d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037d8:	4641      	mov	r1, r8
 80037da:	4638      	mov	r0, r7
 80037dc:	47c8      	blx	r9
 80037de:	3001      	adds	r0, #1
 80037e0:	d01e      	beq.n	8003820 <_printf_common+0xa4>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	6922      	ldr	r2, [r4, #16]
 80037e6:	f003 0306 	and.w	r3, r3, #6
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	bf02      	ittt	eq
 80037ee:	68e5      	ldreq	r5, [r4, #12]
 80037f0:	6833      	ldreq	r3, [r6, #0]
 80037f2:	1aed      	subeq	r5, r5, r3
 80037f4:	68a3      	ldr	r3, [r4, #8]
 80037f6:	bf0c      	ite	eq
 80037f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037fc:	2500      	movne	r5, #0
 80037fe:	4293      	cmp	r3, r2
 8003800:	bfc4      	itt	gt
 8003802:	1a9b      	subgt	r3, r3, r2
 8003804:	18ed      	addgt	r5, r5, r3
 8003806:	2600      	movs	r6, #0
 8003808:	341a      	adds	r4, #26
 800380a:	42b5      	cmp	r5, r6
 800380c:	d11a      	bne.n	8003844 <_printf_common+0xc8>
 800380e:	2000      	movs	r0, #0
 8003810:	e008      	b.n	8003824 <_printf_common+0xa8>
 8003812:	2301      	movs	r3, #1
 8003814:	4652      	mov	r2, sl
 8003816:	4641      	mov	r1, r8
 8003818:	4638      	mov	r0, r7
 800381a:	47c8      	blx	r9
 800381c:	3001      	adds	r0, #1
 800381e:	d103      	bne.n	8003828 <_printf_common+0xac>
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003828:	3501      	adds	r5, #1
 800382a:	e7c6      	b.n	80037ba <_printf_common+0x3e>
 800382c:	18e1      	adds	r1, r4, r3
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	2030      	movs	r0, #48	@ 0x30
 8003832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003836:	4422      	add	r2, r4
 8003838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800383c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003840:	3302      	adds	r3, #2
 8003842:	e7c7      	b.n	80037d4 <_printf_common+0x58>
 8003844:	2301      	movs	r3, #1
 8003846:	4622      	mov	r2, r4
 8003848:	4641      	mov	r1, r8
 800384a:	4638      	mov	r0, r7
 800384c:	47c8      	blx	r9
 800384e:	3001      	adds	r0, #1
 8003850:	d0e6      	beq.n	8003820 <_printf_common+0xa4>
 8003852:	3601      	adds	r6, #1
 8003854:	e7d9      	b.n	800380a <_printf_common+0x8e>
	...

08003858 <_printf_i>:
 8003858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800385c:	7e0f      	ldrb	r7, [r1, #24]
 800385e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003860:	2f78      	cmp	r7, #120	@ 0x78
 8003862:	4691      	mov	r9, r2
 8003864:	4680      	mov	r8, r0
 8003866:	460c      	mov	r4, r1
 8003868:	469a      	mov	sl, r3
 800386a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800386e:	d807      	bhi.n	8003880 <_printf_i+0x28>
 8003870:	2f62      	cmp	r7, #98	@ 0x62
 8003872:	d80a      	bhi.n	800388a <_printf_i+0x32>
 8003874:	2f00      	cmp	r7, #0
 8003876:	f000 80d2 	beq.w	8003a1e <_printf_i+0x1c6>
 800387a:	2f58      	cmp	r7, #88	@ 0x58
 800387c:	f000 80b9 	beq.w	80039f2 <_printf_i+0x19a>
 8003880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003888:	e03a      	b.n	8003900 <_printf_i+0xa8>
 800388a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800388e:	2b15      	cmp	r3, #21
 8003890:	d8f6      	bhi.n	8003880 <_printf_i+0x28>
 8003892:	a101      	add	r1, pc, #4	@ (adr r1, 8003898 <_printf_i+0x40>)
 8003894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003898:	080038f1 	.word	0x080038f1
 800389c:	08003905 	.word	0x08003905
 80038a0:	08003881 	.word	0x08003881
 80038a4:	08003881 	.word	0x08003881
 80038a8:	08003881 	.word	0x08003881
 80038ac:	08003881 	.word	0x08003881
 80038b0:	08003905 	.word	0x08003905
 80038b4:	08003881 	.word	0x08003881
 80038b8:	08003881 	.word	0x08003881
 80038bc:	08003881 	.word	0x08003881
 80038c0:	08003881 	.word	0x08003881
 80038c4:	08003a05 	.word	0x08003a05
 80038c8:	0800392f 	.word	0x0800392f
 80038cc:	080039bf 	.word	0x080039bf
 80038d0:	08003881 	.word	0x08003881
 80038d4:	08003881 	.word	0x08003881
 80038d8:	08003a27 	.word	0x08003a27
 80038dc:	08003881 	.word	0x08003881
 80038e0:	0800392f 	.word	0x0800392f
 80038e4:	08003881 	.word	0x08003881
 80038e8:	08003881 	.word	0x08003881
 80038ec:	080039c7 	.word	0x080039c7
 80038f0:	6833      	ldr	r3, [r6, #0]
 80038f2:	1d1a      	adds	r2, r3, #4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6032      	str	r2, [r6, #0]
 80038f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003900:	2301      	movs	r3, #1
 8003902:	e09d      	b.n	8003a40 <_printf_i+0x1e8>
 8003904:	6833      	ldr	r3, [r6, #0]
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	1d19      	adds	r1, r3, #4
 800390a:	6031      	str	r1, [r6, #0]
 800390c:	0606      	lsls	r6, r0, #24
 800390e:	d501      	bpl.n	8003914 <_printf_i+0xbc>
 8003910:	681d      	ldr	r5, [r3, #0]
 8003912:	e003      	b.n	800391c <_printf_i+0xc4>
 8003914:	0645      	lsls	r5, r0, #25
 8003916:	d5fb      	bpl.n	8003910 <_printf_i+0xb8>
 8003918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800391c:	2d00      	cmp	r5, #0
 800391e:	da03      	bge.n	8003928 <_printf_i+0xd0>
 8003920:	232d      	movs	r3, #45	@ 0x2d
 8003922:	426d      	negs	r5, r5
 8003924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003928:	4859      	ldr	r0, [pc, #356]	@ (8003a90 <_printf_i+0x238>)
 800392a:	230a      	movs	r3, #10
 800392c:	e011      	b.n	8003952 <_printf_i+0xfa>
 800392e:	6821      	ldr	r1, [r4, #0]
 8003930:	6833      	ldr	r3, [r6, #0]
 8003932:	0608      	lsls	r0, r1, #24
 8003934:	f853 5b04 	ldr.w	r5, [r3], #4
 8003938:	d402      	bmi.n	8003940 <_printf_i+0xe8>
 800393a:	0649      	lsls	r1, r1, #25
 800393c:	bf48      	it	mi
 800393e:	b2ad      	uxthmi	r5, r5
 8003940:	2f6f      	cmp	r7, #111	@ 0x6f
 8003942:	4853      	ldr	r0, [pc, #332]	@ (8003a90 <_printf_i+0x238>)
 8003944:	6033      	str	r3, [r6, #0]
 8003946:	bf14      	ite	ne
 8003948:	230a      	movne	r3, #10
 800394a:	2308      	moveq	r3, #8
 800394c:	2100      	movs	r1, #0
 800394e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003952:	6866      	ldr	r6, [r4, #4]
 8003954:	60a6      	str	r6, [r4, #8]
 8003956:	2e00      	cmp	r6, #0
 8003958:	bfa2      	ittt	ge
 800395a:	6821      	ldrge	r1, [r4, #0]
 800395c:	f021 0104 	bicge.w	r1, r1, #4
 8003960:	6021      	strge	r1, [r4, #0]
 8003962:	b90d      	cbnz	r5, 8003968 <_printf_i+0x110>
 8003964:	2e00      	cmp	r6, #0
 8003966:	d04b      	beq.n	8003a00 <_printf_i+0x1a8>
 8003968:	4616      	mov	r6, r2
 800396a:	fbb5 f1f3 	udiv	r1, r5, r3
 800396e:	fb03 5711 	mls	r7, r3, r1, r5
 8003972:	5dc7      	ldrb	r7, [r0, r7]
 8003974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003978:	462f      	mov	r7, r5
 800397a:	42bb      	cmp	r3, r7
 800397c:	460d      	mov	r5, r1
 800397e:	d9f4      	bls.n	800396a <_printf_i+0x112>
 8003980:	2b08      	cmp	r3, #8
 8003982:	d10b      	bne.n	800399c <_printf_i+0x144>
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	07df      	lsls	r7, r3, #31
 8003988:	d508      	bpl.n	800399c <_printf_i+0x144>
 800398a:	6923      	ldr	r3, [r4, #16]
 800398c:	6861      	ldr	r1, [r4, #4]
 800398e:	4299      	cmp	r1, r3
 8003990:	bfde      	ittt	le
 8003992:	2330      	movle	r3, #48	@ 0x30
 8003994:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003998:	f106 36ff 	addle.w	r6, r6, #4294967295
 800399c:	1b92      	subs	r2, r2, r6
 800399e:	6122      	str	r2, [r4, #16]
 80039a0:	f8cd a000 	str.w	sl, [sp]
 80039a4:	464b      	mov	r3, r9
 80039a6:	aa03      	add	r2, sp, #12
 80039a8:	4621      	mov	r1, r4
 80039aa:	4640      	mov	r0, r8
 80039ac:	f7ff fee6 	bl	800377c <_printf_common>
 80039b0:	3001      	adds	r0, #1
 80039b2:	d14a      	bne.n	8003a4a <_printf_i+0x1f2>
 80039b4:	f04f 30ff 	mov.w	r0, #4294967295
 80039b8:	b004      	add	sp, #16
 80039ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	f043 0320 	orr.w	r3, r3, #32
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	4833      	ldr	r0, [pc, #204]	@ (8003a94 <_printf_i+0x23c>)
 80039c8:	2778      	movs	r7, #120	@ 0x78
 80039ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	6831      	ldr	r1, [r6, #0]
 80039d2:	061f      	lsls	r7, r3, #24
 80039d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80039d8:	d402      	bmi.n	80039e0 <_printf_i+0x188>
 80039da:	065f      	lsls	r7, r3, #25
 80039dc:	bf48      	it	mi
 80039de:	b2ad      	uxthmi	r5, r5
 80039e0:	6031      	str	r1, [r6, #0]
 80039e2:	07d9      	lsls	r1, r3, #31
 80039e4:	bf44      	itt	mi
 80039e6:	f043 0320 	orrmi.w	r3, r3, #32
 80039ea:	6023      	strmi	r3, [r4, #0]
 80039ec:	b11d      	cbz	r5, 80039f6 <_printf_i+0x19e>
 80039ee:	2310      	movs	r3, #16
 80039f0:	e7ac      	b.n	800394c <_printf_i+0xf4>
 80039f2:	4827      	ldr	r0, [pc, #156]	@ (8003a90 <_printf_i+0x238>)
 80039f4:	e7e9      	b.n	80039ca <_printf_i+0x172>
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	f023 0320 	bic.w	r3, r3, #32
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	e7f6      	b.n	80039ee <_printf_i+0x196>
 8003a00:	4616      	mov	r6, r2
 8003a02:	e7bd      	b.n	8003980 <_printf_i+0x128>
 8003a04:	6833      	ldr	r3, [r6, #0]
 8003a06:	6825      	ldr	r5, [r4, #0]
 8003a08:	6961      	ldr	r1, [r4, #20]
 8003a0a:	1d18      	adds	r0, r3, #4
 8003a0c:	6030      	str	r0, [r6, #0]
 8003a0e:	062e      	lsls	r6, r5, #24
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	d501      	bpl.n	8003a18 <_printf_i+0x1c0>
 8003a14:	6019      	str	r1, [r3, #0]
 8003a16:	e002      	b.n	8003a1e <_printf_i+0x1c6>
 8003a18:	0668      	lsls	r0, r5, #25
 8003a1a:	d5fb      	bpl.n	8003a14 <_printf_i+0x1bc>
 8003a1c:	8019      	strh	r1, [r3, #0]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	6123      	str	r3, [r4, #16]
 8003a22:	4616      	mov	r6, r2
 8003a24:	e7bc      	b.n	80039a0 <_printf_i+0x148>
 8003a26:	6833      	ldr	r3, [r6, #0]
 8003a28:	1d1a      	adds	r2, r3, #4
 8003a2a:	6032      	str	r2, [r6, #0]
 8003a2c:	681e      	ldr	r6, [r3, #0]
 8003a2e:	6862      	ldr	r2, [r4, #4]
 8003a30:	2100      	movs	r1, #0
 8003a32:	4630      	mov	r0, r6
 8003a34:	f7fc fbcc 	bl	80001d0 <memchr>
 8003a38:	b108      	cbz	r0, 8003a3e <_printf_i+0x1e6>
 8003a3a:	1b80      	subs	r0, r0, r6
 8003a3c:	6060      	str	r0, [r4, #4]
 8003a3e:	6863      	ldr	r3, [r4, #4]
 8003a40:	6123      	str	r3, [r4, #16]
 8003a42:	2300      	movs	r3, #0
 8003a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a48:	e7aa      	b.n	80039a0 <_printf_i+0x148>
 8003a4a:	6923      	ldr	r3, [r4, #16]
 8003a4c:	4632      	mov	r2, r6
 8003a4e:	4649      	mov	r1, r9
 8003a50:	4640      	mov	r0, r8
 8003a52:	47d0      	blx	sl
 8003a54:	3001      	adds	r0, #1
 8003a56:	d0ad      	beq.n	80039b4 <_printf_i+0x15c>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	079b      	lsls	r3, r3, #30
 8003a5c:	d413      	bmi.n	8003a86 <_printf_i+0x22e>
 8003a5e:	68e0      	ldr	r0, [r4, #12]
 8003a60:	9b03      	ldr	r3, [sp, #12]
 8003a62:	4298      	cmp	r0, r3
 8003a64:	bfb8      	it	lt
 8003a66:	4618      	movlt	r0, r3
 8003a68:	e7a6      	b.n	80039b8 <_printf_i+0x160>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	4649      	mov	r1, r9
 8003a70:	4640      	mov	r0, r8
 8003a72:	47d0      	blx	sl
 8003a74:	3001      	adds	r0, #1
 8003a76:	d09d      	beq.n	80039b4 <_printf_i+0x15c>
 8003a78:	3501      	adds	r5, #1
 8003a7a:	68e3      	ldr	r3, [r4, #12]
 8003a7c:	9903      	ldr	r1, [sp, #12]
 8003a7e:	1a5b      	subs	r3, r3, r1
 8003a80:	42ab      	cmp	r3, r5
 8003a82:	dcf2      	bgt.n	8003a6a <_printf_i+0x212>
 8003a84:	e7eb      	b.n	8003a5e <_printf_i+0x206>
 8003a86:	2500      	movs	r5, #0
 8003a88:	f104 0619 	add.w	r6, r4, #25
 8003a8c:	e7f5      	b.n	8003a7a <_printf_i+0x222>
 8003a8e:	bf00      	nop
 8003a90:	08003c0d 	.word	0x08003c0d
 8003a94:	08003c1e 	.word	0x08003c1e

08003a98 <memmove>:
 8003a98:	4288      	cmp	r0, r1
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	eb01 0402 	add.w	r4, r1, r2
 8003aa0:	d902      	bls.n	8003aa8 <memmove+0x10>
 8003aa2:	4284      	cmp	r4, r0
 8003aa4:	4623      	mov	r3, r4
 8003aa6:	d807      	bhi.n	8003ab8 <memmove+0x20>
 8003aa8:	1e43      	subs	r3, r0, #1
 8003aaa:	42a1      	cmp	r1, r4
 8003aac:	d008      	beq.n	8003ac0 <memmove+0x28>
 8003aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ab6:	e7f8      	b.n	8003aaa <memmove+0x12>
 8003ab8:	4402      	add	r2, r0
 8003aba:	4601      	mov	r1, r0
 8003abc:	428a      	cmp	r2, r1
 8003abe:	d100      	bne.n	8003ac2 <memmove+0x2a>
 8003ac0:	bd10      	pop	{r4, pc}
 8003ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aca:	e7f7      	b.n	8003abc <memmove+0x24>

08003acc <_sbrk_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4d06      	ldr	r5, [pc, #24]	@ (8003ae8 <_sbrk_r+0x1c>)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	f7fc ffaa 	bl	8000a30 <_sbrk>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_sbrk_r+0x1a>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_sbrk_r+0x1a>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	2000026c 	.word	0x2000026c

08003aec <memcpy>:
 8003aec:	440a      	add	r2, r1
 8003aee:	4291      	cmp	r1, r2
 8003af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003af4:	d100      	bne.n	8003af8 <memcpy+0xc>
 8003af6:	4770      	bx	lr
 8003af8:	b510      	push	{r4, lr}
 8003afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b02:	4291      	cmp	r1, r2
 8003b04:	d1f9      	bne.n	8003afa <memcpy+0xe>
 8003b06:	bd10      	pop	{r4, pc}

08003b08 <_realloc_r>:
 8003b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b0c:	4680      	mov	r8, r0
 8003b0e:	4615      	mov	r5, r2
 8003b10:	460c      	mov	r4, r1
 8003b12:	b921      	cbnz	r1, 8003b1e <_realloc_r+0x16>
 8003b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b18:	4611      	mov	r1, r2
 8003b1a:	f7ff bc4b 	b.w	80033b4 <_malloc_r>
 8003b1e:	b92a      	cbnz	r2, 8003b2c <_realloc_r+0x24>
 8003b20:	f7ff fbdc 	bl	80032dc <_free_r>
 8003b24:	2400      	movs	r4, #0
 8003b26:	4620      	mov	r0, r4
 8003b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b2c:	f000 f81a 	bl	8003b64 <_malloc_usable_size_r>
 8003b30:	4285      	cmp	r5, r0
 8003b32:	4606      	mov	r6, r0
 8003b34:	d802      	bhi.n	8003b3c <_realloc_r+0x34>
 8003b36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b3a:	d8f4      	bhi.n	8003b26 <_realloc_r+0x1e>
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	4640      	mov	r0, r8
 8003b40:	f7ff fc38 	bl	80033b4 <_malloc_r>
 8003b44:	4607      	mov	r7, r0
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d0ec      	beq.n	8003b24 <_realloc_r+0x1c>
 8003b4a:	42b5      	cmp	r5, r6
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4621      	mov	r1, r4
 8003b50:	bf28      	it	cs
 8003b52:	4632      	movcs	r2, r6
 8003b54:	f7ff ffca 	bl	8003aec <memcpy>
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	f7ff fbbe 	bl	80032dc <_free_r>
 8003b60:	463c      	mov	r4, r7
 8003b62:	e7e0      	b.n	8003b26 <_realloc_r+0x1e>

08003b64 <_malloc_usable_size_r>:
 8003b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b68:	1f18      	subs	r0, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bfbc      	itt	lt
 8003b6e:	580b      	ldrlt	r3, [r1, r0]
 8003b70:	18c0      	addlt	r0, r0, r3
 8003b72:	4770      	bx	lr

08003b74 <_init>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr

08003b80 <_fini>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr
